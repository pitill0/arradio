#!/usr/bin/env bash

# =============================================================================
# HELPER FUNCTIONS
# =============================================================================

arradio-msg-debug() {
  local msgprefix='\033[1;33m**'
  local msgsuffix='\033[0m'
  if [ ${ARRADIO_DEBUG} -eq 1 ]; then
    [ ${ARRADIO_NOCOLOR} -eq 1 ] && msgprefix='[debug]'
    echo -e "${msgprefix}${msgsuffix} $@"
  fi
}

arradio-msg-info() {
  local msgprefix='\033[1;34m**'
  local msgsuffix='\033[0m'
  [ ${ARRADIO_NOCOLOR} -eq 1 ] && msgprefix='**'
  echo -e "${msgprefix}${msgsuffix} $@"
}

arradio-msg-error() {
  local msgprefix='\033[1;31m**'
  local msgsuffix='\033[0m'
  [ ${ARRADIO_NOCOLOR} -eq 1 ] && msgprefix='[error]'
  echo -e "${msgprefix}${msgsuffix} $@" 2>&1
  exit 1
}

arradio-print-version() {
  echo "arradio v${ARRADIO_VERSION}"
  exit 0
}

arradio-print-help() {
  cat << __HELP__
Usage:
  arradio [command]

Available Commands:
  top500             Get arradio-top500 radio stations
  random             Get random list of radio stations
  search  string     Search for radio stations by keyword
  listen  id         Listen to specified radio station
  fadd    id         Add radio station to your favourites
  fdel    id         Delete radio station from your favourites
  flist              List favourites radio stations
  ui                 Start user interface mode
  help               Show this help information
  version            Show version information
  install            Install arradio itself
  update             Update arradio itself

Flags::
  -l number          Limit output lines (default: ${ARRADIO_OUTPUT_LIMIT})
  -o format          Output list format (simple or wide, default: ${ARRADIO_OUTPUT_FILTER})
  -t theme           Set UI theme (molokai, gruvbox, nordvim, purple, light, or dark)
__HELP__
  exit 0
}

arradio-check-deps() {
  for dep in $@; do
    # Search for the given executable in PATH (avoids a dependency on the `which` command)
    if ! type -P $dep >/dev/null 2>&1; then
      arradio-msg-error "Dependency '$dep' not found."
    fi
  done
}

arradio-set-player() {
  # We need at least one media player application
  # Otherwise we will use the default one `arradio-player`
  local arradio_player_cmd="arradio-player"
  # Detection will be in order of preference
  if type -P mpv >/dev/null 2>&1; then
    arradio_player_cmd="mpv --no-video"
  elif type -P mplayer >/dev/null 2>&1; then
    arradio_player_cmd="mplayer -vo null"
  elif type -P ffplay >/dev/null 2>&1; then
    arradio_player_cmd="ffplay -vn"
  elif type -P cvlc >/dev/null 2>&1; then
    arradio_player_cmd="cvlc --novideo"
  fi
  export ARRADIO_PLAYER_CMD=${arradio_player_cmd}
}

arradio-get-fzf-version() {
  arradio-check-deps "cut"
  # Search for the given executable in PATH (avoids a dependency on the `which` command)
  if ! type -P fzf >/dev/null 2>&1; then
    # Return exit code 1
    return 1
  else
    fzf --version | cut -d' ' -f1
    return 0
  fi
}

arradio-get-station-url-by-id() {
  arradio-check-deps "cp" "curl" "sed" "grep" "cut"
  [ $# -lt 1 ] && arradio-print-help
  local id="$1"
  local stream_url=""
  case ${id} in
    000*)
      # get the stream URL directly from favorites file
      stream_url=$(grep 'File1' ${ARRADIO_FAVDIR}/${id} | cut -d'=' -f2)
      ;;
    *)
      # first check against tunein-station.pls
      if curl -I --fail -s "http://yp.shoutcast.com/sbin/tunein-station.pls?id=${id}" >/dev/null 2>&1; then
        # use a temporary file to get the stream URL
        curl -o ${ARRADIO_TMPFILE} -s "http://yp.shoutcast.com/sbin/tunein-station.pls?id=${id}"
        if ! grep -q 'numberofentries=0' ${ARRADIO_TMPFILE}; then
          stream_url=$(grep 'File1' ${ARRADIO_TMPFILE} | cut -d'=' -f2)
        fi
        # if station exists then still check if streamUrl is operational
        # - tunein-stations.pls returns the streamUrl for some stations even they are broken
        # - randomstations uses a different API to get the stream URL
        if ! curl -I --fail -s "${stream_url}" >/dev/null 2>&1; then
          # remove quotes from response
          stream_url=$(curl -X POST -d "station=${id}" -s 'https://directory.shoutcast.com/Player/GetStreamUrl' | sed -e 's/^"//' -e 's/"$//')
        fi
      fi
      ;;
  esac
  echo ${stream_url}
}

arradio-filter-output() {
  arradio-check-deps "cat" "xmllint" "grep" "sed"
  case ${ARRADIO_OUTPUT_FILTER} in
    simple)
      printf "%8s %s\n" "STATION" "DESCRIPTION"
      ;;
    wide)
      printf "%8s %-20s %s\n" "STATION" "GENRE" "DESCRIPTION"
      ;;
  esac
  cat - \
  | xmllint --format - \
  | grep 'station name' \
  | while read line; do
      id=$(echo $line | sed -e 's|.* id="||' -e 's|" .*||')
      name=$(echo $line | sed -e 's|.* name="||' -e 's|" .*||')
      genre=$(echo $line | sed -e 's|.* genre="||' -e 's|" .*||')
      case ${ARRADIO_OUTPUT_FILTER} in
        simple)
          printf "%8s %s\n" "$id" "$name"
          ;;
        wide)
          printf "%8s %-20s %s\n" "$id" "$genre" "$name"
          ;;
      esac
    done
}

arradio-get-opts() {
  while [ $1 ]; do
    case $1 in
      --limit|-l) ARRADIO_OUTPUT_LIMIT=$2 && shift ;;
      --output|-o) ARRADIO_OUTPUT_FILTER=$2 && shift ;;
      --theme|-t) ARRADIO_UI_THEME=$2 && shift ;;
    esac
    shift
  done
}

# =============================================================================
# INSTALL / UPDATE
# =============================================================================

arradio-install() {
  arradio-check-deps "mkdir" "curl" "chmod"
  if [ -f ${ARRADIO_BINDIR}/arradio ]; then
    arradio-msg-error "arradio previously installed. Please remove it or run 'update' command."
  fi
  arradio-msg-debug "Installing arradio to ${ARRADIO_HOME}"
  mkdir -p ${ARRADIO_HOME} ${ARRADIO_BINDIR} ${ARRADIO_FAVDIR} ${ARRADIO_TMPDIR}
  curl -fsSL ${ARRADIO_GITHUB_RAW} -o ${ARRADIO_BINDIR}/arradio
  chmod +x ${ARRADIO_BINDIR}/arradio
  arradio-msg-info "Installed successfully!"
  arradio-msg-info "IMPORTANT: To finish do you need to add binaries to your PATH as for example:"
  arradio-msg-info "  export PATH=\$HOME/.arradio/bin:\$PATH"
}

arradio-update() {
  arradio-check-deps "curl"
  if [ ! -f ${ARRADIO_BINDIR}/arradio ]; then
    arradio-msg-error "Cannot update arradio. You need to install it first."
  fi
  arradio-msg-debug "Updating ${ARRADIO_SRCDIR}"
  curl -fsSL ${ARRADIO_GITHUB_RAW} -o ${ARRADIO_BINDIR}/arradio && chmod +x ${ARRADIO_BINDIR}/arradio
  arradio-msg-info "Updated successfully!"
}

# =============================================================================
# SHOUTcast (see: http://wiki.winamp.com/wiki/SHOUTcast_Radio_Directory_API)
# =============================================================================

arradio-top500() {
  arradio-check-deps "curl"
  curl -s "${SHOUTCAST_API_URL}Top500?k=${SHOUTCAST_API_ID}&limit=${ARRADIO_OUTPUT_LIMIT}" \
  | arradio-filter-output
}

arradio-search() {
  arradio-check-deps "curl"
  [ $# -lt 1 ] && arradio-print-help
  local string="$1"
  curl -s "${SHOUTCAST_API_URL}stationsearch?k=${SHOUTCAST_API_ID}&search=${string}&limit=${ARRADIO_OUTPUT_LIMIT}" \
  | arradio-filter-output
}

arradio-random() {
  arradio-check-deps "curl"
  curl -s "${SHOUTCAST_API_URL2}randomstations?k=${SHOUTCAST_API_ID}&f=xml&limit=${ARRADIO_OUTPUT_LIMIT}" \
  | arradio-filter-output
}

# =============================================================================
# LISTEN
# =============================================================================

arradio-listen() {
  local id=$1
  local stream_url=$(arradio-get-station-url-by-id $id)
  if [ -z ${stream_url} ]; then
    arradio-msg-error "stream URL not found for station ${id}"
  fi
  arradio-set-player
  arradio-msg-info "${ARRADIO_PLAYER_CMD} '${stream_url}'"
  ${ARRADIO_PLAYER_CMD} ${stream_url}
}

# =============================================================================
# FAVOURITES
# =============================================================================

arradio-fadd() {
  arradio-check-deps "mkdir" "curl" "grep"
  [ $# -lt 1 ] && arradio-print-help
  local id="$1"
  [ ! -d ${ARRADIO_FAVDIR} ] && mkdir -p $ARRADIO_FAVDIR
  curl -o ${ARRADIO_TMPFILE} -s "http://yp.shoutcast.com/sbin/tunein-station.pls?id=${id}"
  if ! grep -q 'numberofentries=0' ${ARRADIO_TMPFILE}; then
    cp -f ${ARRADIO_TMPFILE} ${ARRADIO_FAVDIR}/${id}
  fi
}

arradio-fdel() {
  [ $# -lt 1 ] && arradio-print-help
  local id="$1"
  rm -f ${ARRADIO_FAVDIR}/${id}
}

arradio-flist() {
  arradio-check-deps "basename" "grep" "sed"
  if [ -d ${ARRADIO_FAVDIR} ]; then
    printf "%8s %s\n" "STATION" "DESCRIPTION"
    for fav in ${ARRADIO_FAVDIR}/*; do
      printf "%8s " "$(basename ${fav})"
      grep 'Title1=' ${fav} | sed -e 's|Title1=||' -e 's/.*) //'
    done
  fi
}

# =============================================================================
# USER INTERFACE
# =============================================================================

arradio-ui-set-theme() {
  case ${ARRADIO_UI_THEME} in
    light)
      # junegunn/seoul256.vim (light)
      export FZF_DEFAULT_OPTS='--color=bg+:#D9D9D9,bg:#E1E1E1,border:#C8C8C8,spinner:#719899,hl:#719872,fg:#616161,header:#719872,info:#727100,pointer:#E12672,marker:#E17899,fg+:#616161,preview-bg:#D9D9D9,prompt:#0099BD,hl+:#719899'
      ;;
    dark)
      # junegunn/seoul256.vim (dark)
      export FZF_DEFAULT_OPTS='--color=bg+:#3F3F3F,bg:#4B4B4B,border:#6B6B6B,spinner:#98BC99,hl:#719872,fg:#D9D9D9,header:#719872,info:#BDBB72,pointer:#E12672,marker:#E17899,fg+:#D9D9D9,preview-bg:#3F3F3F,prompt:#98BEDE,hl+:#98BC99'
      ;;
    gruvbox)
      # morhetz/gruvbox
      export FZF_DEFAULT_OPTS='--color=bg+:#3c3836,bg:#32302f,spinner:#fb4934,hl:#928374,fg:#ebdbb2,header:#928374,info:#8ec07c,pointer:#fb4934,marker:#fb4934,fg+:#ebdbb2,prompt:#fb4934,hl+:#fb4934'
      ;;
    nord)
      # arcticicestudio/nord-vim
      export FZF_DEFAULT_OPTS='--color=bg+:#3B4252,bg:#2E3440,spinner:#81A1C1,hl:#616E88,fg:#D8DEE9,header:#616E88,info:#81A1C1,pointer:#81A1C1,marker:#81A1C1,fg+:#D8DEE9,prompt:#81A1C1,hl+:#81A1C1'
      ;;
    molokai)
      # tomasr/molokai
      export FZF_DEFAULT_OPTS='--color=bg+:#293739,bg:#1B1D1E,border:#808080,spinner:#E6DB74,hl:#7E8E91,fg:#F8F8F2,header:#7E8E91,info:#A6E22E,pointer:#A6E22E,marker:#F92672,fg+:#F8F8F2,prompt:#F92672,hl+:#F92672'
      ;;
    purple)
      # purple
      export FZF_DEFAULT_OPTS='--color=bg+:#E0E0D9,bg:#E0E0E1,border:#7E1E91,spinner:#928374,hl:#7E1E91,fg:#515151,header:#7E1E91,info:#8ec07c,pointer:#81A1C1,marker:#192672,fg+:#515151,prompt:#fb4934,hl+:#192672'
      ;;
  esac
}

arradio-ui() {
  arradio-check-deps "fzf"
  arradio-ui-set-theme
  : | fzf \
    --layout=reverse --info=inline \
    --border=bold --border-label=" arradio v${ARRADIO_VERSION} " --border-label-pos=0 \
    --header-lines=1 --no-separator \
    --padding=1 \
    --prompt "Favorites> " \
    --preview 'arradio listen {1}' \
    --preview-window 'down,40%,border,follow' \
    --header $'\nCTRL-F Favorites | CTRL-T Top500 | CTRL-R Random | +,- Add or remove\n\n' \
    --bind 'start:reload(arradio flist)' \
    --bind 'enter:change-preview-window(up|down)' \
    --bind 'ctrl-f:change-prompt(Favorites> )+reload(arradio flist)' \
    --bind 'ctrl-t:change-prompt(Top500> )+reload(arradio top500)' \
    --bind 'ctrl-r:change-prompt(Random> )+reload(arradio random)' \
    --bind '+:change-prompt(Favorites> )+reload(arradio fadd {1}; arradio flist)' \
    --bind '-:change-prompt(Favorites> )+reload(arradio fdel {1}; arradio flist)'
}

export LC_ALL=${LC_ALL:-C}
export PATH=${ARRADIO_BINDIR}:${PATH}

readonly ARRADIO_VERSION="0.1.0"
readonly ARRADIO_GITHUB_RAW="https://raw.githubusercontent.com/sepen/arradio/master/arradio"

# Global variables
export ARRADIO_NOCOLOR=${ARRADIO_NOCOLOR:-0}
export ARRADIO_DEBUG=${ARRADIO_DEBUG:-0}
export ARRADIO_HOME="${ARRADIO_HOME:-${HOME}/.arradio}"
export ARRADIO_BINDIR="${ARRADIO_BINDIR:-${ARRADIO_HOME}/bin}"
export ARRADIO_FAVDIR="${ARRADIO_FAVDIR:-${ARRADIO_HOME}/favorites}"
export ARRADIO_TMPDIR="${ARRADIO_TMPDIR:-${ARRADIO_HOME}/tmp}"
export ARRADIO_TMPFILE="${ARRADIO_TMPDIR}/station"
export ARRADIO_OUTPUT_LIMIT=${ARRADIO_OUTPUT_LIMIT:-500}
export ARRADIO_OUTPUT_FILTER="${ARRADIO_OUTPUT_FILTER:-wide}"
export ARRADIO_UI_THEME="${ARRADIO_UI_THEME:-none}"
export ARRADIO_PLAYER_CMD="arradio-player"

# SHOUTcast
readonly SHOUTCAST_API_ID="sh17tOUi_ezL61_A"
readonly SHOUTCAST_API_URL="http://api.shoutcast.com/legacy/"
readonly SHOUTCAST_API_URL2="http://api.shoutcast.com/station/"

# Show help when no arguments given
[ $# -eq 0 ] && arradio-print-help

arradio-get-opts $@

while [ $1 ]; do
  case $1 in
    top500) arradio-top500 ; break ;;
    search) shift 1 ; arradio-search $@ ; break ;;
    random) arradio-random ; break ;;
    listen) shift 1 ; arradio-listen $1 ; break ;;
    fadd) shift 1 ; arradio-fadd $1 ; break ;;
    fdel) shift 1 ; arradio-fdel $1; break ;;
    flist) arradio-flist ; break ;;
    ui) arradio-ui ; break ;;
    version) arradio-print-version ;;
    install) arradio-install ;;
    update) arradio-update ;;
    *) arradio-print-help ;;
  esac
  shift
done

# End of file
