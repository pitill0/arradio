#!/usr/bin/env bash

# =============================================================================
# HELPER FUNCTIONS
# =============================================================================

arradio-msg-debug() {
  local msgprefix='\033[1;33m**'
  local msgsuffix='\033[0m'
  if [ ${ARRADIO_DEBUG} -eq 1 ]; then
    [ ${ARRADIO_NOCOLOR} -eq 1 ] && msgprefix='[debug]'
    echo -e "${msgprefix}${msgsuffix} $@"
  fi
}

arradio-msg-info() {
  local msgprefix='\033[1;34m**'
  local msgsuffix='\033[0m'
  [ ${ARRADIO_NOCOLOR} -eq 1 ] && msgprefix='**'
  echo -e "${msgprefix}${msgsuffix} $@"
}

arradio-msg-error() {
  local msgprefix='\033[1;31m**'
  local msgsuffix='\033[0m'
  [ ${ARRADIO_NOCOLOR} -eq 1 ] && msgprefix='[error]'
  echo -e "${msgprefix}${msgsuffix} $@" 2>&1
  exit 1
}

arradio-print-version() {
  echo "arradio v${ARRADIO_VERSION}"
  exit 0
}

arradio-print-help() {
  cat << __HELP__
Usage:
  arradio [command]

Available Commands:
  top500             Get top 500 radio stations
  search  string     Search for radio stations by keyword
  listen  id         Listen to specified radio station
  fadd    id         Add radio station to your favourites
  fdel    id         Delete radio station from your favourites
  flist              List favourites radio stations
  ui                 Start arradio in User Interface mode
  help               Show this help information
  version            Show version information
  install            Install arradio itself
  update             Update arradio itself

Flags::
  -l number          Limit output lines. Default: $ARRADIO_OUTPUT_LIMIT
  -o format          Output list format (simple or wide). Default: $ARRADIO_OUTPUT_FILTER
  -t theme           UI theme (basic, molokai, gruvbox, nord, light, or dark). Default: $ARRADIO_UI_THEME
  -p command         Command to play the streams. Default: $ARRADIO_PLAYER_CMD
  -n                 Make requests every time before using a cached resource
  -d                 Enable debug messages
__HELP__
  exit 0
}

arradio-check-deps() {
  for dep in $@; do
    # Search for the given executable in PATH (avoids a dependency on the `which` command)
    if ! type -P $dep >/dev/null 2>&1; then
      arradio-msg-error "Dependency '$dep' not found."
    fi
  done
}

arradio-get-md5-command(){
  if type -P md5sum >/dev/null 2>&1; then
    echo "md5sum"
  elif type -P md5 >/dev/null 2>&1; then
    echo "md5"
  else
    arradio-msg-error "md5sum or md5 command is required"
  fi
}

arradio-set-player() {
  # We need at least one media player application
  # Otherwise we will use the default one
  local arradio_player_cmd="${ARRADIO_PLAYER_CMD}"
  # When the player is forced it also avoids having to detect it
  if [ ! -z "${ARRADIO_FORCE_PLAYER_CMD}" ]; then
    arradio_player_cmd="${ARRADIO_FORCE_PLAYER_CMD}"
  else
    # Detection will be in order of preference
    if type -P mpv >/dev/null 2>&1; then
      arradio_player_cmd="mpv --no-video"
    elif type -P ffplay >/dev/null 2>&1; then
      arradio_player_cmd="ffplay -vn"
    elif type -P mplayer >/dev/null 2>&1; then
      arradio_player_cmd="mplayer -vo null"
    elif type -P cvlc >/dev/null 2>&1; then
      arradio_player_cmd="cvlc --novideo"
    fi
  fi
  export ARRADIO_PLAYER_CMD=${arradio_player_cmd}
}

arradio-get-fzf-version() {
  arradio-check-deps "cut"
  # Search for the given executable in PATH (avoids a dependency on the `which` command)
  if ! type -P fzf >/dev/null 2>&1; then
    #Â Return exit code 1
    return 1
  else
    fzf --version | cut -d' ' -f1
    return 0
  fi
}

arradio-make-api-request()  {
  arradio-check-deps "cut" "curl" "xmllint"
  local md5_command="$(arradio-get-md5-command)"
  [ $# -lt 1 ] && arradio-print-help
  local request_url="$1"
  local cache_name="$(echo "${request_url}" | ${md5_command} | cut -d' ' -f1)"
  local cache_file="${ARRADIO_CACHEDIR}/${cache_name}"
  # store the response to cache
  if [ ${ARRADIO_NOCACHE} -eq 1 ] || [ ! -f "${cache_file}" ]; then
    arradio-msg-debug "Caching file for request url ${request_url}"
    curl -s "${request_url}" -o ${ARRADIO_TMPFILE}
    xmllint --format ${ARRADIO_TMPFILE} --output "${cache_file}"
  fi
  # output from cache
  cat "${cache_file}"
}

arradio-get-station-url() {
  arradio-check-deps "grep" "sed" "curl" "grep"
  [ $# -lt 1 ] && arradio-print-help
  local station_id="$1"
  # first check if we can get the station_url from the db_file
  local db_file="${ARRADIO_DBDIR}/${station_id}"
  if [ -f ${db_file} ]; then
    local station_url="$(grep '^url: ' ${db_file} 2>/dev/null | sed 's|url: ||')"
    # make a request if we can't get the station_url from the db_file
    if [ -z ${station_url} ]; then
      station_url=$(curl -X POST -d "station=${station_id}" -s 'https://directory.shoutcast.com/Player/GetStreamUrl' | sed -e 's/^"//' -e 's/"$//')
      # update station_url in the db_file
      grep -v '^url: ' ${db_file} > ${ARRADIO_TMPFILE}
      echo "url: ${station_url}" >> ${ARRADIO_TMPFILE}
      cp ${ARRADIO_TMPFILE} ${db_file}
    fi
    echo ${station_url}
  fi
}

arradio-output-filter() {
  arradio-check-deps "cat" "xmllint" "grep" "sed" "head"
  case ${ARRADIO_OUTPUT_FILTER} in
    simple)
      printf "%8s  %-18s  %s\n" "STATION" "GENRE" "NAME"
      ;;
    wide)
      printf "%8s  %-18s  %-38s  %s\n" "STATION" "GENRE" "NAME" "INFO"
      ;;
  esac
  cat - \
  | grep 'station name' \
  | while read xml_line; do
      station_id="$(echo ${xml_line} | sed -e 's|.* id="||' -e 's|" .*||')"
      db_file="${ARRADIO_DBDIR}/${station_id}"
      if [ ${ARRADIO_NOCACHE} -eq 1 ] || [ ! -f "${db_file}" ]; then
        arradio-msg-debug "Updating db file for station: ${station_id}"
        echo ${xml_line} | sed \
          -e 's|.*<station name="|name: |' \
          -e 's|" mt="|\nmt: |' \
          -e 's|" id="|\nid: |' \
          -e 's|" br="|\nbr: |' \
          -e 's|" genre="|\ngenre: |' \
          -e 's|" genre2="|\ngenre2: |' \
          -e 's|" genre3="|\ngenre3: |' \
          -e 's|" genre4="|\ngenre4: |' \
          -e 's|" logo="|\nlogo: |' \
          -e 's|" ct="|\ninfo: |' \
          -e 's|" lc="|\nlc: |' \
          -e 's|"\/>|\n|' \
          -e 's|\&quot;|"|g' \
          -e 's|\&nbsp;| |g' \
          -e 's|\&lt;|<|g' \
          -e 's|\&gt;|>|g' \
          -e 's|\&amp;|\&|g' > ${db_file}
      fi
      station_genre="$(grep '^genre: ' ${db_file} 2>/dev/null | sed 's|genre: ||')"
      station_name="$(grep '^name: ' ${db_file} 2>/dev/null | sed 's|name: ||')"
      station_info="$(grep '^info: ' ${db_file} 2>/dev/null | sed 's|info: ||')"
      case ${ARRADIO_OUTPUT_FILTER} in
        simple)
          printf "%8s  %-18s  %s\n" "${station_id}" "${station_genre}" "${station_name:-'NO NAME'}"
          ;;
        wide)
          station_name=$(echo ${station_name} | head -c 38)
          printf "%8s  %-18s  %-38s  %s\n" "${station_id}" "${station_genre}" "${station_name:-'NO NAME'}" "${station_info}"
          ;;
      esac
    done
}

arradio-get-opts() {
  while [ $1 ]; do
    case $1 in
      --limit|-l) ARRADIO_OUTPUT_LIMIT=$2 && shift ;;
      --output|-o) ARRADIO_OUTPUT_FILTER=$2 && shift ;;
      --theme|-t) ARRADIO_UI_THEME=$2 && shift ;;
      --player|-p) ARRADIO_FORCE_PLAYER_CMD=$2 && shift ;;
      --nocache|-n) ARRADIO_NOCACHE=1 ;;
      --debug|-d) ARRADIO_DEBUG=1 ;;
    esac
    shift
  done
}

# =============================================================================
# INSTALL / UPDATE
# =============================================================================

arradio-install() {
  arradio-check-deps "mkdir" "curl" "chmod"
  if [ -f ${ARRADIO_BINDIR}/arradio ]; then
    arradio-msg-error "arradio previously installed. Please remove it or run 'update' command."
  fi
  arradio-msg-debug "Installing arradio to ${ARRADIO_HOME}"
  mkdir -p ${ARRADIO_HOME} ${ARRADIO_BINDIR} ${ARRADIO_DBDIR} ${ARRADIO_CACHEDIR} ${ARRADIO_FAVDIR} ${ARRADIO_TMPDIR}
  curl -fsSL ${ARRADIO_GITHUB_RAW} -o ${ARRADIO_BINDIR}/arradio
  chmod +x ${ARRADIO_BINDIR}/arradio
  arradio-msg-info "Installed successfully!"
  arradio-msg-info "IMPORTANT: To finish do you need to add binaries to your PATH as for example:"
  arradio-msg-info "  export PATH=\$HOME/.arradio/bin:\$PATH"
}

arradio-update() {
  arradio-check-deps "curl"
  if [ ! -f ${ARRADIO_BINDIR}/arradio ]; then
    arradio-msg-error "Cannot update arradio. You need to install it first."
  fi
  arradio-msg-debug "Updating ${ARRADIO_SRCDIR}"
  curl -fsSL ${ARRADIO_GITHUB_RAW} -o ${ARRADIO_BINDIR}/arradio && chmod +x ${ARRADIO_BINDIR}/arradio
  arradio-msg-info "Updated successfully!"
}

# =============================================================================
# SHOUTcast (see: http://wiki.winamp.com/wiki/SHOUTcast_Radio_Directory_API)
# =============================================================================

arradio-top500() {
  arradio-make-api-request "${SHOUTCAST_API_URL}Top500?k=${SHOUTCAST_API_ID}&limit=${ARRADIO_OUTPUT_LIMIT}" \
  | arradio-output-filter
}

arradio-search() {
  [ $# -lt 1 ] && arradio-print-help
  arradio-make-api-request "${SHOUTCAST_API_URL}stationsearch?search=$1&k=${SHOUTCAST_API_ID}&limit=${ARRADIO_OUTPUT_LIMIT}" \
  | arradio-output-filter
}

# =============================================================================
# LISTEN
# =============================================================================

arradio-listen() {
  local station_id="$1"
  local station_url="$(arradio-get-station-url $station_id)"
  if [ -z ${station_url} ]; then
    arradio-msg-error "station_url not found for station_id ${station_id}"
  fi
  arradio-set-player
  arradio-msg-info "${ARRADIO_PLAYER_CMD} ${station_url}"
  ${ARRADIO_PLAYER_CMD} ${station_url}
}

# =============================================================================
# FAVOURITES
# =============================================================================

arradio-fadd() {
  arradio-check-deps "cp"
  [ $# -lt 1 ] && arradio-print-help
  local station_id="$1"
  local db_file="${ARRADIO_DBDIR}/${station_id}"
  if [ -f ${db_file} ]; then
    cp ${db_file} ${ARRADIO_FAVDIR}/${station_id}
  fi
}

arradio-fdel() {
  arradio-check-deps "rm"
  [ $# -lt 1 ] && arradio-print-help
  local station_id="$1"
  rm ${ARRADIO_FAVDIR}/${station_id}
}

arradio-flist() {
  arradio-check-deps "basename" "grep" "sed"
  if [ -d ${ARRADIO_FAVDIR} ]; then
    case ${ARRADIO_OUTPUT_FILTER} in
      simple)
        printf "%8s  %-18s  %s\n" "STATION" "GENRE" "NAME"
        ;;
      wide)
        printf "%8s  %-18s  %-38s  %s\n" "STATION" "GENRE" "NAME" "INFO"
        ;;
    esac
    for fav_file in ${ARRADIO_FAVDIR}/*; do
      station_id="$(grep '^id:' ${fav_file} 2>/dev/null | sed 's|id: ||')"
      station_genre="$(grep '^genre: ' ${fav_file} 2>/dev/null | sed 's|genre: ||')"
      station_name="$(grep '^name: ' ${fav_file} 2>/dev/null | sed 's|name: ||')"
      station_info="$(grep '^info: ' ${fav_file} 2>/dev/null | sed 's|info: ||')"
      case ${ARRADIO_OUTPUT_FILTER} in
        simple)
          printf "%8s  %-18s  %s\n" "${station_id}" "${station_genre}" "${station_name}"
          ;;
        wide)
          station_name=$(echo ${station_name} | head -c 38)
          printf "%8s  %-18s  %-38s  %s\n" "${station_id}" "${station_genre}" "${station_name}" "${station_info}"
          ;;
      esac
    done
  fi
}

# =============================================================================
# USER INTERFACE
# =============================================================================

arradio-ui-set-theme() {
  case ${ARRADIO_UI_THEME} in
    light)
      # based on: junegunn/seoul256.vim (light)
      THEME_COLOR1='fg:#616161,preview-fg:#616161,bg:#E1E1E1,preview-bg:#E1E1E1'
      THEME_COLOR2='hl:#719872,fg+:#616161,bg+:#D9D9D9,gutter:#808080,hl+:#719899'
      THEME_COLOR3='info:#727100,border:#C8C8C8,scrollbar:#7E8E91,separator:#808080'
      THEME_COLOR4='label:#0099BD,preview-label:#0099BD,prompt:#0099BD'
      THEME_COLOR5='pointer:#E12672,marker:#E17899,spinner:#719899,header:#719872'
      ;;
    dark)
      # based on: junegunn/seoul256.vim (dark)
      THEME_COLOR1='fg:#D9D9D9,preview-fg:#D9D9D9,bg:#4B4B4B,preview-bg:#3F3F3F'
      THEME_COLOR2='hl:#719872,fg+:#D9D9D9,bg+:#3F3F3F,gutter:#808080,hl+:#98BC99'
      THEME_COLOR3='info:#BDBB72,border:#6B6B6B,scrollbar:#7E8E91,separator:#808080'
      THEME_COLOR4='label:#0099BD,preview-label:#0099BD,prompt:#98BEDE'
      THEME_COLOR5='pointer:#E12672,marker:#E17899,spinner:#98BC99,header:#719872'
      ;;
    gruvbox)
      # based on: morhetz/gruvbox
      THEME_COLOR1='fg:#EBDBB2,preview-fg:#EBDBB2,bg:#32302F,preview-bg:#32302F'
      THEME_COLOR2='hl:#928374,fg+:#EBDBB2,bg+:#3C3836,gutter:#808080,hl+:#FB4934'
      THEME_COLOR3='info:#8EC07C,border:#808080,scrollbar:#7E8E91,separator:#808080'
      THEME_COLOR4='label:#FB4934,preview-label:#FB4934,prompt:#FB4934'
      THEME_COLOR5='pointer:#FB4934,marker:#FB4934,spinner:#FB4934,header:#928374'
      ;;
    nord)
      # based on: arcticicestudio/nord-vim
      THEME_COLOR1='fg:#D8DEE9,preview-fg:#D8DEE9,bg:#2E3440,preview-bg:#2E3440'
      THEME_COLOR2='hl:#616E88,fg+:#D8DEE9,bg+:#3B4252,gutter:#808080,hl+:#81A1C1'
      THEME_COLOR3='info:#81A1C1,border:#808080,scrollbar:#7E8E91,separator:#808080'
      THEME_COLOR4='label:#81A1C1,preview-label:#81A1C1,prompt:#81A1C1'
      THEME_COLOR5='pointer:#81A1C1,marker:#81A1C1,spinner:#81A1C1,header:#616E88'
      ;;
    molokai)
      # based on: tomasr/molokai
      THEME_COLOR1='fg:#F8F8F2,preview-fg:#F8F8F2,bg:#1B1D1E,preview-bg:#1B1D1E'
      THEME_COLOR2='hl:#7E8E91,fg+:#F8F8F2,bg+:#293739,gutter:#808080,hl+:#F92672'
      THEME_COLOR3='info:#A6E22E,border:#808080,scrollbar:#7E8E91,separator:#808080'
      THEME_COLOR4='label:#F92672,preview-label:#F92672,prompt:#F92672'
      THEME_COLOR5='pointer:#A6E22E,marker:#F92672,spinner:#E6DB74,header:#7E8E91'
      ;;
    purple)
      THEME_COLOR1='fg:#AFAFAF,preview-fg:#AFAFAF,bg:#101010,preview-bg:#101010'
      THEME_COLOR2='hl:#FFFFFF,fg+:#1C1C1C,bg+:#F1F1F1,gutter:#333333,hl+:#919191'
      THEME_COLOR3='info:#FF2FF3,border:#4F0063,scrollbar:#F09FFE,separator:#4F0063'
      THEME_COLOR4='label:#4F0063,preview-label:#FF2FF3,prompt:#FF2FF3'
      THEME_COLOR5='pointer:#FF2FF3,marker:#FF2FF3,spinner:#FF2FF3,header:#F09FFE'
      ;;
    basic)
      THEME_COLOR1='fg:#919191,preview-fg:#5F5F5F,bg:#101010,preview-bg:#101010'
      THEME_COLOR2='hl:#000000,fg+:#FFFFFF,bg+:#282828,gutter:#333333,hl+:#878787'
      THEME_COLOR3='info:#919191,border:#C1C1C1,scrollbar:#5F5F5F,separator:#C1C1C1'
      THEME_COLOR4='label:#696EF1,preview-label:#696EF1,prompt:#696EF1'
      THEME_COLOR5='pointer:#696EF1,marker:#696EF1,spinner:#696EF1,header:#5F5F5F'
      ;;
    *)
      # no theme selected
      arradio-msg-info "UI theme not supported: \`${ARRADIO_UI_THEME}\`"
      arradio-print-help
      ;;
  esac
  export FZF_DEFAULT_OPTS="--color=${THEME_COLOR1} --color=${THEME_COLOR2} --color=${THEME_COLOR3} --color=${THEME_COLOR4} --color=${THEME_COLOR5}"
}

arradio-ui() {
  arradio-check-deps "fzf"
  arradio-ui-set-theme
  case $(arradio-get-fzf-version) in
    0.4*)
      : | fzf \
        --layout=reverse --info=inline --cycle \
        --border=bold --border-label=" arradio v${ARRADIO_VERSION} " --border-label-pos=0 \
        --header-lines=1 --no-separator --padding=1 \
        --prompt "Favorites> " \
        --preview 'arradio listen {1}' \
        --preview-window 'down,33%,border,follow' \
        --header $'\nCTRL-F Favorites | CTRL-T Top500 | +/- Favorites add/remove\n\n' \
        --bind 'start:reload(arradio flist)' \
        --bind 'enter:change-preview-window(down,66%|down)' \
        --bind 'ctrl-f:change-prompt(Favorites> )+reload(arradio flist)' \
        --bind 'ctrl-t:change-prompt(Top500> )+reload(arradio top500)' \
        --bind '+:change-prompt(Favorites> )+reload(arradio fadd {1}; arradio flist)' \
        --bind '-:change-prompt(Favorites> )+reload(arradio fdel {1}; arradio flist)'
      ;;
    *)
      : | arradio-flist | fzf \
        --layout=reverse --info=inline --cycle \
        --border \
        --header-lines=1 \
        --prompt "arradio> " \
        --preview 'arradio listen {1}' \
        --preview-window 'down' \
        --header $'\nCTRL-F Favorites | CTRL-T Top500 | +/- Favorites add/remove\n\n' \
        --bind 'enter:ignore' \
        --bind 'ctrl-f:reload(arradio flist)' \
        --bind 'ctrl-t:reload(arradio top500)' \
        --bind '+:reload(arradio fadd {1}; arradio flist)' \
        --bind '-:reload(arradio fdel {1}; arradio flist)'
      ;;
  esac
}

export LC_ALL=${LC_ALL:-C}
export PATH=${ARRADIO_BINDIR}:${PATH}

readonly ARRADIO_VERSION="0.1.0"
readonly ARRADIO_GITHUB_RAW="https://raw.githubusercontent.com/sepen/arradio/master/arradio"

# Global variables
export ARRADIO_NOCOLOR=${ARRADIO_NOCOLOR:-0}
export ARRADIO_DEBUG=${ARRADIO_DEBUG:-0}
export ARRADIO_HOME="${ARRADIO_HOME:-${HOME}/.arradio}"
export ARRADIO_BINDIR="${ARRADIO_BINDIR:-${ARRADIO_HOME}/bin}"
export ARRADIO_DBDIR="${ARRADIO_DBDIR:-${ARRADIO_HOME}/db}"
export ARRADIO_CACHEDIR="${ARRADIO_CACHEDIR:-${ARRADIO_HOME}/cache}"
export ARRADIO_FAVDIR="${ARRADIO_FAVDIR:-${ARRADIO_HOME}/favorites}"
export ARRADIO_TMPDIR="${ARRADIO_TMPDIR:-${ARRADIO_HOME}/tmp}"
export ARRADIO_TMPFILE="${ARRADIO_TMPDIR}/station"

# Global flags
export ARRADIO_OUTPUT_LIMIT=${ARRADIO_OUTPUT_LIMIT:-20} # from 1 to 500
export ARRADIO_OUTPUT_FILTER="${ARRADIO_OUTPUT_FILTER:-simple}"
export ARRADIO_UI_THEME="${ARRADIO_UI_THEME:-basic}"
export ARRADIO_PLAYER_CMD="arradio-player"
export ARRADIO_FORCE_PLAYER_CMD="${ARRADIO_FORCE_PLAYER_CMD}"
export ARRADIO_NOCACHE=${ARRADIO_NOCACHE:-0}

# SHOUTcast
readonly SHOUTCAST_API_ID="sh17tOUi_ezL61_A"
readonly SHOUTCAST_API_URL="http://api.shoutcast.com/legacy/"

# Show help when no arguments given
[ $# -eq 0 ] && arradio-print-help

arradio-get-opts $@

while [ $1 ]; do
  case $1 in
    top500) arradio-top500 ; break ;;
    search) shift 1 ; arradio-search $@ ; break ;;
    listen) shift 1 ; arradio-listen $1 ; break ;;
    fadd) shift 1 ; arradio-fadd $1 ; break ;;
    fdel) shift 1 ; arradio-fdel $1; break ;;
    flist) arradio-flist ; break ;;
    ui) arradio-ui ; break ;;
    version) arradio-print-version ;;
    install) arradio-install ;;
    update) arradio-update ;;
    *) arradio-print-help ;;
  esac
  shift
done

# End of file
