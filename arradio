#!/usr/bin/env bash

# =============================================================================
# HELPER FUNCTIONS
# =============================================================================

arradio-msg-debug() {
  local msgprefix='\033[1;33m**'
  local msgsuffix='\033[0m'
  if [ ${ARRADIO_DEBUG} -eq 1 ]; then
    [ ${ARRADIO_NOCOLOR} -eq 1 ] && msgprefix='[debug]'
    echo -e "${msgprefix}${msgsuffix} $@"
  fi
}

arradio-msg-info() {
  local msgprefix='\033[0;32m**'
  local msgsuffix='\033[0m'
  [ ${ARRADIO_NOCOLOR} -eq 1 ] && msgprefix='**'
  echo -e "${msgprefix}${msgsuffix} $@"
}

arradio-msg-error() {
  local msgprefix='\033[1;31m**'
  local msgsuffix='\033[0m'
  [ ${ARRADIO_NOCOLOR} -eq 1 ] && msgprefix='[error]'
  echo -e "${msgprefix}${msgsuffix} $@" 2>&1
  exit 1
}

arradio-print-version() {
  echo "arradio v${ARRADIO_VERSION}"
  exit 0
}

arradio-print-help() {
  cat << __HELP__
Usage:
  arradio [command] <flags>

Available Commands:
  install                   Install arradio itself
  upgrade                   Upgrade arradio itself
  top500                    Get top 500 radio stations
  search [string]           Search for radio stations by keyword
  listen [number]           Listen to specified radio station
  info [number]             Get information for specified radio station
  fadd [number]             Add radio station to your favourites
  fdel [number]             Delete radio station from your favourites
  flist                     List favourites radio stations
  ui                        Start arradio in UI mode (User Interface)
  themes                    List installed UI themes
  help                      Show this help information
  version                   Show version information

Optional Flags:
  -l, --limit [number]      Limit output lines (default: $ARRADIO_OUTPUT_LIMIT)
  -o, --output [string]     Output list format simple or wide (default: $ARRADIO_OUTPUT_FILTER)
  -p, --player [string]     Command to play the streams. Default: $ARRADIO_PLAYER_CMD
  -t, --theme [string]      UI theme (default: $ARRADIO_UI_THEME)
  -b, --no-color            Do not colorize messages and output lists
  -n, --no-cache            Do not use cached resources
  -d, --debug               Enable debug messages
__HELP__
  exit 0
}

arradio-set-flags() {
  while [ $1 ]; do
    case $1 in
      -l|--limit)
        shift 1 && ARRADIO_OUTPUT_LIMIT=$1
        ;;
      -o|--output)
        shift 1 && ARRADIO_OUTPUT_FILTER=$1
        ;;
      -t|--theme)
        shift 1 && ARRADIO_UI_THEME=$1
        ;;
      -p|--player)
        shift 1 && ARRADIO_FORCE_PLAYER_CMD=$1
        ;;
      -b|--no-color)
        ARRADIO_NOCOLOR=1
        ;;
      -n|--no-cache)
        ARRADIO_NOCACHE=1
        ;;
      -d|--debug)
        ARRADIO_DEBUG=1
        ;;
    esac
    shift
  done
}

arradio-check-deps() {
  for dep in $@; do
    # Search for the given executable in PATH (avoids a dependency on the `which` command)
    if ! type -P $dep >/dev/null 2>&1; then
      arradio-msg-error "Dependency '$dep' not found."
    fi
  done
}

arradio-get-md5-command(){
  if type -P md5sum >/dev/null 2>&1; then
    echo "md5sum"
  elif type -P md5 >/dev/null 2>&1; then
    echo "md5"
  else
    arradio-msg-error "md5sum or md5 command is required"
  fi
}

arradio-set-player() {
  # We need at least one media player application
  # Otherwise we will use the default one
  local arradio_player_cmd="${ARRADIO_PLAYER_CMD}"
  # When the player is forced it also avoids having to detect it
  if [ ! -z "${ARRADIO_FORCE_PLAYER_CMD}" ]; then
    arradio_player_cmd="${ARRADIO_FORCE_PLAYER_CMD}"
  else
    # Detection will be in order of preference
    # - Look for the binary in PATH environment variable
    # - Also check for the binary in macOS apps
    if type -P mpv >/dev/null 2>&1; then
      arradio_player_cmd="mpv --no-video"
    elif test -f /Applications/mpv.app/Contents/MacOS/mpv >/dev/null 2>&1; then
      arradio_player_cmd="/Applications/mpv.app/Contents/MacOS/mpv --no-video"
    elif type -P ffplay >/dev/null 2>&1; then
      arradio_player_cmd="ffplay -vn -nodisp"
    elif type -P mplayer >/dev/null 2>&1; then
      arradio_player_cmd="mplayer -vo null"
    elif type -P cvlc >/dev/null 2>&1; then
      arradio_player_cmd="cvlc --novideo"
    elif type -P vlc >/dev/null 2>&1; then
      arradio_player_cmd="vlc --novideo"
    elif test -f /Applications/VLC.app/Contents/MacOS/VLC >/dev/null 2>&1; then
      arradio_player_cmd="/Applications/VLC.app/Contents/MacOS/VLC --novideo"
    fi
  fi
  export ARRADIO_PLAYER_CMD=${arradio_player_cmd}
}

arradio-get-fzf-version() {
  arradio-check-deps "cut"
  # Search for the given executable in PATH (avoids a dependency on the `which` command)
  if ! type -P fzf >/dev/null 2>&1; then
    # Return exit code 1
    return 1
  else
    fzf --version | cut -d' ' -f1
    return 0
  fi
}

arradio-make-api-request()  {
  arradio-check-deps "cut" "curl" "xmllint"
  local md5_command="$(arradio-get-md5-command)"
  [ $# -lt 1 ] && arradio-print-help
  local request_url="$1"
  local cache_name="$(echo "${request_url}" | ${md5_command} | cut -d' ' -f1)"
  local cache_file="${ARRADIO_CACHE_DIR}/${cache_name}"
  # store the response to cache
  if [ ${ARRADIO_NOCACHE} -eq 1 ] || [ ! -f "${cache_file}" ]; then
    arradio-msg-debug "Caching file for request url ${request_url}"
    curl -s "${request_url}" -o ${ARRADIO_TMP_FILE}
    xmllint --format ${ARRADIO_TMP_FILE} --output "${cache_file}"
  fi
  # output from cache
  cat "${cache_file}"
}

arradio-get-station-url() {
  arradio-check-deps "grep" "sed" "curl" "grep"
  [ $# -lt 1 ] && arradio-print-help
  local station_id="$1"
  # first check if we can get the station_url from the db_file
  local db_file="${ARRADIO_DB_DIR}/${station_id}"
  if [ -f ${db_file} ]; then
    local station_url="$(grep '^url: ' ${db_file} 2>/dev/null | sed 's|url: ||')"
    # make a request if we can't get the station_url from the db_file
    if [ -z ${station_url} ]; then
      station_url=$(curl -X POST -d "station=${station_id}" -s 'https://directory.shoutcast.com/Player/GetStreamUrl' | sed -e 's/^"//' -e 's/"$//')
      # update station_url in the db_file
      grep -v '^url: ' ${db_file} > ${ARRADIO_TMP_FILE}
      echo "url: ${station_url}" >> ${ARRADIO_TMP_FILE}
      cp ${ARRADIO_TMP_FILE} ${db_file}
    fi
    echo ${station_url}
  fi
}

arradio-output-filter() {
  arradio-check-deps "cat" "xmllint" "grep" "sed" "head"
  local msgprefix='\033[1m'
  local msgsuffix='\033[0m'
  [ ${ARRADIO_NOCOLOR} -eq 1 ] && msgprefix=''
  case ${ARRADIO_OUTPUT_FILTER} in
    simple)
      printf "${msgprefix}%8s  %-18s  %s${msgsuffix}\n" "STATION" "GENRE" "NAME"
      ;;
    wide)
      printf "${msgprefix}%8s  %-18s  %-38s  %s${msgsuffix}\n" "STATION" "GENRE" "NAME" "INFO"
      ;;
  esac
  cat - \
  | grep 'station name' \
  | while read xml_line; do
      station_id="$(echo ${xml_line} | sed -e 's|.* id="||' -e 's|" .*||')"
      db_file="${ARRADIO_DB_DIR}/${station_id}"
      if [ ${ARRADIO_NOCACHE} -eq 1 ] || [ ! -f "${db_file}" ]; then
        arradio-msg-debug "Updating db file for station: ${station_id}"
        echo ${xml_line} | sed \
          -e 's|.*<station name="|name: |' \
          -e 's|" mt="|\nmt: |' \
          -e 's|" id="|\nid: |' \
          -e 's|" br="|\nbr: |' \
          -e 's|" genre="|\ngenre: |' \
          -e 's|" genre2="|\ngenre2: |' \
          -e 's|" genre3="|\ngenre3: |' \
          -e 's|" genre4="|\ngenre4: |' \
          -e 's|" logo="|\nlogo: |' \
          -e 's|" ct="|\ninfo: |' \
          -e 's|" lc="|\nlc: |' \
          -e 's|"\/>|\n|' \
          -e 's|\&quot;|"|g' \
          -e 's|\&nbsp;| |g' \
          -e 's|\&lt;|<|g' \
          -e 's|\&gt;|>|g' \
          -e 's|\&amp;|\&|g' > ${db_file}
      fi
      station_genre="$(grep '^genre: ' ${db_file} 2>/dev/null | sed 's|genre: ||')"
      station_name="$(grep '^name: ' ${db_file} 2>/dev/null | sed 's|name: ||')"
      station_info="$(grep '^info: ' ${db_file} 2>/dev/null | sed 's|info: ||')"
      case ${ARRADIO_OUTPUT_FILTER} in
        simple)
          printf "%8s  %-18s  %s\n" "${station_id}" "${station_genre}" "${station_name:-'NO NAME'}"
          ;;
        wide)
          station_name=$(echo ${station_name} | head -c 38)
          printf "%8s  %-18s  %-38s  %s\n" "${station_id}" "${station_genre}" "${station_name:-'NO NAME'}" "${station_info}"
          ;;
      esac
    done
}

# =============================================================================
# INSTALL / UPGRADE
# =============================================================================

arradio-install() {
  arradio-check-deps "mkdir" "curl" "chmod"
  if [ -f ${ARRADIO_BIN_DIR}/arradio ]; then
    arradio-msg-error "arradio previously installed. Please remove it or run 'upgrade' command."
  fi
  arradio-msg-debug "Installing arradio to ${ARRADIO_HOME}"
  mkdir -p ${ARRADIO_HOME} ${ARRADIO_BIN_DIR} ${ARRADIO_DB_DIR} ${ARRADIO_CACHE_DIR} ${ARRADIO_FAV_DIR} ${ARRADIO_TMP_DIR}
  curl -fsSL ${ARRADIO_GITHUB_RAW} -o ${ARRADIO_BIN_DIR}/arradio
  chmod +x ${ARRADIO_BIN_DIR}/arradio
  arradio-msg-info "Installed successfully!"
  arradio-msg-info "IMPORTANT: To finish do you need to add binaries to your PATH as for example:"
  arradio-msg-info "  export PATH=\$HOME/.arradio/bin:\$PATH"
  exit 0
}

arradio-upgrade() {
  arradio-check-deps "curl"
  if [ ! -f ${ARRADIO_BIN_DIR}/arradio ]; then
    arradio-msg-error "Cannot upgrade arradio. You need to install it first."
  fi
  arradio-msg-debug "Upgrading ${ARRADIO_SRCDIR}"
  curl -fsSL ${ARRADIO_GITHUB_RAW} -o ${ARRADIO_BIN_DIR}/arradio && chmod +x ${ARRADIO_BIN_DIR}/arradio
  arradio-msg-info "Upgraded successfully!"
  exit 0
}

# =============================================================================
# SHOUTcast (see: http://wiki.winamp.com/wiki/SHOUTcast_Radio_Directory_API)
# =============================================================================

arradio-top500() {
  arradio-make-api-request "${SHOUTCAST_API_URL}Top500?k=${SHOUTCAST_API_ID}&limit=${ARRADIO_OUTPUT_LIMIT}" \
  | arradio-output-filter
}

arradio-search() {
  [ $# -lt 1 ] && arradio-print-help
  arradio-make-api-request "${SHOUTCAST_API_URL}stationsearch?search=$1&k=${SHOUTCAST_API_ID}&limit=${ARRADIO_OUTPUT_LIMIT}" \
  | arradio-output-filter
}

# =============================================================================
# LISTEN
# =============================================================================

arradio-listen() {
  local station_id="$1"
  local station_url="$(arradio-get-station-url $station_id)"
  if [ -z ${station_url} ]; then
    arradio-msg-error "station_url not found for station_id ${station_id}"
  fi
  arradio-set-player
  arradio-msg-info "${ARRADIO_PLAYER_CMD} ${station_url}"
  ${ARRADIO_PLAYER_CMD} ${station_url}
}

# =============================================================================
# INFO
# =============================================================================

arradio-info() {
  arradio-check-deps "grep" "sed"
  [ $# -lt 1 ] && arradio-print-help
  local msgprefix='\033[1m'
  local msgsuffix='\033[0m'
  [ ${ARRADIO_NOCOLOR} -eq 1 ] && msgprefix=''
  local station_id="$1"
  local db_file="${ARRADIO_DB_DIR}/${station_id}"
  if [ ! -f ${db_file} ]; then
    arradio-msg-error "station_id ${station_id} not found"
  fi
  local station_url="$(arradio-get-station-url $station_id)"
  if [ -z ${station_url} ]; then
    arradio-msg-error "station_url not found for station_id ${station_id}"
  fi
  local station_name="$(grep '^name: ' ${db_file} 2>/dev/null | sed 's|name: ||')"
  local station_genre="$(grep '^genre: ' ${db_file} 2>/dev/null | sed 's|genre: ||')"
  local station_bitrate="$(grep '^br: ' ${db_file} 2>/dev/null | sed 's|br: ||')"
  local station_info="$(grep '^info: ' ${db_file} 2>/dev/null | sed 's|info: ||')"
  printf "${msgprefix}%-8s${msgsuffix}  %s\n" "Station" "${station_id}"
  printf "${msgprefix}%-8s${msgsuffix}  %s\n" "Name" "${station_name}"
  printf "${msgprefix}%-8s${msgsuffix}  %s\n" "Genre" "${station_genre}"
  [ ! -z "${station_bitrate}" ] && printf "${msgprefix}%-8s${msgsuffix}  %s kbit/s\n" "Bitrate" "${station_bitrate}"
  [ ! -z "${station_info}" ] && printf "${msgprefix}%-8s${msgsuffix}  %s\n" "Info" "${station_info}"
}

# =============================================================================
# FAVOURITES
# =============================================================================

arradio-fadd() {
  arradio-check-deps "cp"
  [ $# -lt 1 ] && arradio-print-help
  local station_id="$1"
  local db_file="${ARRADIO_DB_DIR}/${station_id}"
  if [ -f ${db_file} ]; then
    cp ${db_file} ${ARRADIO_FAV_DIR}/${station_id}
  fi
}

arradio-fdel() {
  arradio-check-deps "rm"
  [ $# -lt 1 ] && arradio-print-help
  local station_id="$1"
  rm ${ARRADIO_FAV_DIR}/${station_id}
}

arradio-flist() {
  arradio-check-deps "basename" "grep" "sed"
  if [ -d ${ARRADIO_FAV_DIR} ]; then
    local msgprefix='\033[1m'
    local msgsuffix='\033[0m'
    [ ${ARRADIO_NOCOLOR} -eq 1 ] && msgprefix=''
    case ${ARRADIO_OUTPUT_FILTER} in
      simple)
        printf "${msgprefix}%8s  %-18s  %s${msgsuffix}\n" "STATION" "GENRE" "NAME"
        ;;
      wide)
        printf "${msgprefix}%8s  %-18s  %-38s  %s${msgsuffix}\n" "STATION" "GENRE" "NAME" "INFO"
        ;;
    esac
    for fav_file in ${ARRADIO_FAV_DIR}/*; do
      station_id="$(grep '^id:' ${fav_file} 2>/dev/null | sed 's|id: ||')"
      station_genre="$(grep '^genre: ' ${fav_file} 2>/dev/null | sed 's|genre: ||')"
      station_name="$(grep '^name: ' ${fav_file} 2>/dev/null | sed 's|name: ||')"
      station_info="$(grep '^info: ' ${fav_file} 2>/dev/null | sed 's|info: ||')"
      case ${ARRADIO_OUTPUT_FILTER} in
        simple)
          printf "%8s  %-18s  %s\n" "${station_id}" "${station_genre}" "${station_name}"
          ;;
        wide)
          station_name=$(echo ${station_name} | head -c 38)
          printf "%8s  %-18s  %-38s  %s\n" "${station_id}" "${station_genre}" "${station_name}" "${station_info}"
          ;;
      esac
    done
  fi
}

# =============================================================================
# UI THEMES
# =============================================================================

arradio-ui-set-theme() {
  local ui_theme_color=''
  local ui_theme_vars=(
    fg preview_fg bg preview_bg hl fg_plus bg_plus gutter hl_plus
    info border scrollbar preview_border preview_scrollbar separator
    label preview_label prompt pointer marker spinner header
  )
  if [ -f ${ARRADIO_UI_THEME_DIR}/${ARRADIO_UI_THEME} ]; then
    source ${ARRADIO_UI_THEME_DIR}/${ARRADIO_UI_THEME}
    for ui_theme_var in ${ui_theme_vars[@]}; do
      if [ ! -z ${ui_theme_var} ]; then
        case $(arradio-get-fzf-version) in
          0.4[0-9].*)
            ui_theme_color+="${!ui_theme_var},"
            ;;
          *)
            case ${ui_theme_var} in
              'scrollbar'|'preview_border'|'preview_scrollbar'|'separator'|'label'|'preview_label')
                ;;
              *)
                ui_theme_color+="${!ui_theme_var},"
                ;;
            esac
            ;;
        esac
      fi
    done
    # qremove last , char
    ui_theme_color="${ui_theme_color%,*}"
    export FZF_DEFAULT_OPTS+=" --color=${ui_theme_color}"
  else
    arradio-msg-debug "UI theme not found"
    export FZF_DEFAULT_OPTS+=" --no-color"
  fi
}

arradio-ui-list-themes() {
  arradio-check-deps "find"
  local ui_themes="$(find ${ARRADIO_UI_THEME_DIR} -mindepth 1 -maxdepth 1 2>/dev/null)"
  if [ -z "${ui_themes}" ]; then
    arradio-msg-info "No UI themes found. More information here:"
    arradio-msg-info "  https://github.com/sepen/arradio#ui-themes"
  else
    local msgprefix='\033[1m'
    local msgsuffix='\033[0m'
    [ ${ARRADIO_NOCOLOR} -eq 1 ] && msgprefix=''
    printf "${msgprefix}%-10s  %8s  %s${msgsuffix}\n" "THEME" "PALETTE" "DESCRIPTION"
    for ui_theme in ${ui_themes[@]}; do
      source ${ui_theme}
      if [ ! -z "${ui_theme_name}" ]; then
        printf "%-10s  %8s  %s\n" "${ui_theme_name}" "${ui_theme_palette}" "${ui_theme_description}"
      fi
    done
  fi
}

# =============================================================================
# USER INTERFACE
# =============================================================================

arradio-ui() {
  arradio-check-deps "fzf"
  arradio-ui-set-theme
  case $(arradio-get-fzf-version) in
    0.4[0-9].*)
      : | fzf \
        --no-extended --exact \
        --layout=reverse --info=inline --cycle \
        --border=bold --border-label=" arradio v${ARRADIO_VERSION} " --border-label-pos=0 \
        --header-lines=1 --no-separator --padding=1 \
        --prompt "Favorites> " \
        --preview 'arradio info {1}' \
        --preview-window 'down,33%,border,follow' \
        --header $'\nCTRL-F Favorites | CTRL-F Top Stations | ENTER To Play | +/- Favorites add/remove\n\n' \
        --bind 'start:reload(arradio flist)+change-preview(arradio info {1})' \
        --bind 'enter:change-preview(arradio listen {1})' \
        --bind 'focus:change-preview(arradio info {1})' \
        --bind 'ctrl-f:reload(arradio flist)+change-prompt(Favorites> )+change-preview(arradio info {1})' \
        --bind 'ctrl-t:reload(arradio top500)+change-prompt(Top500> )+change-preview(arradio info {1})' \
        --bind '+:reload(arradio fadd {1}; arradio flist)+change-prompt(Favorites> )+change-preview(arradio info {1})' \
        --bind '-:reload(arradio fdel {1}; arradio flist)+change-prompt(Favorites> )+change-preview(arradio info {1})'
      ;;
    *)
      : | arradio-flist | fzf \
        --no-extended --exact \
        --layout=reverse --info=inline --cycle --no-mouse \
        --border \
        --header-lines=1 \
        --prompt "arradio> " \
        --preview 'arradio listen {1}' \
        --preview-window 'down' \
        --header $'\nCTRL-F Favorites | CTRL-T Top500 | +/- Favorites add/remove\n\n' \
        --bind 'enter:ignore' \
        --bind 'ctrl-f:reload(arradio flist)' \
        --bind 'ctrl-t:reload(arradio top500)' \
        --bind '+:reload(arradio fadd {1}; arradio flist)' \
        --bind '-:reload(arradio fdel {1}; arradio flist)'
      ;;
  esac
}

export LC_ALL=${LC_ALL:-C}
export PATH=${ARRADIO_BIN_DIR}:${PATH}

readonly ARRADIO_VERSION="0.2.0"
readonly ARRADIO_GITHUB_RAW="https://raw.githubusercontent.com/sepen/arradio/master/arradio"

# Global variables
export ARRADIO_NOCOLOR=${ARRADIO_NOCOLOR:-0}
export ARRADIO_DEBUG=${ARRADIO_DEBUG:-0}
export ARRADIO_HOME="${ARRADIO_HOME:-${HOME}/.arradio}"
export ARRADIO_BIN_DIR="${ARRADIO_BIN_DIR:-${ARRADIO_HOME}/bin}"
export ARRADIO_DB_DIR="${ARRADIO_DB_DIR:-${ARRADIO_HOME}/db}"
export ARRADIO_CACHE_DIR="${ARRADIO_CACHE_DIR:-${ARRADIO_HOME}/cache}"
export ARRADIO_FAV_DIR="${ARRADIO_FAV_DIR:-${ARRADIO_HOME}/favorites}"
export ARRADIO_UI_THEME_DIR="${ARRADIO_UI_THEME_DIR:-${ARRADIO_HOME}/ui-themes}"
export ARRADIO_TMP_DIR="${ARRADIO_TMP_DIR:-${ARRADIO_HOME}/tmp}"
export ARRADIO_TMP_FILE="${ARRADIO_TMP_DIR}/station"

# Global flags
export ARRADIO_OUTPUT_LIMIT=${ARRADIO_OUTPUT_LIMIT:-20} # from 1 to 500
export ARRADIO_OUTPUT_FILTER="${ARRADIO_OUTPUT_FILTER:-simple}"
export ARRADIO_UI_THEME="${ARRADIO_UI_THEME:-basic}"
export ARRADIO_PLAYER_CMD="arradio-player"
export ARRADIO_FORCE_PLAYER_CMD="${ARRADIO_FORCE_PLAYER_CMD}"
export ARRADIO_NOCACHE=${ARRADIO_NOCACHE:-0}

# SHOUTcast
readonly SHOUTCAST_API_ID="sh17tOUi_ezL61_A"
readonly SHOUTCAST_API_URL="http://api.shoutcast.com/legacy/"

# Show help when no arguments given
[ $# -eq 0 ] && arradio-print-help

arradio-set-flags $@

while [ $1 ]; do
  case $1 in
    install)
      arradio-install
      break
      ;;
    upgrade)
      arradio-upgrade
      break
      ;;
    top500)
      arradio-top500
      break
      ;;
    search)
      shift 1 && arradio-search $@
      break
      ;;
    listen)
      shift 1 && arradio-listen $1
      break
      ;;
    info)
      shift 1 && arradio-info $1
      break
      ;;
    fadd)
      shift 1 && arradio-fadd $1
      break
      ;;
    fdel)
      shift 1 && arradio-fdel $1
      break
      ;;
    flist)
      arradio-flist
      break
      ;;
    ui)
      arradio-ui
      break
      ;;
    themes)
      arradio-ui-list-themes
      break
      ;;
    version)
      arradio-print-version
      break
      ;;
    *)
      arradio-print-help
      break
      ;;
  esac
  shift
done

# End of file
