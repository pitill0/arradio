#!/usr/bin/env bash
#
# arradio: SHOUTcast command line client
#
# Dependencies:
#   xmllint and curl binaries are required
#   mpv or mplayer or vlc is required to play streaming urls


# =============================================================================
# HELPER FUNCTIONS
# =============================================================================

arradio-msg-debug() {
  local msgprefix='\033[1;33m**'
  local msgsuffix='\033[0m'
  if [ ${ARRADIO_DEBUG} -eq 1 ]; then
    [ ${ARRADIO_NOCOLOR} -eq 1 ] && msgprefix='[debug]'
    echo -e "${msgprefix}${msgsuffix} $@"
  fi
}

arradio-msg-info() {
  local msgprefix='\033[1;34m**'
  local msgsuffix='\033[0m'
  [ ${ARRADIO_NOCOLOR} -eq 1 ] && msgprefix='**'
  echo -e "${msgprefix}${msgsuffix} $@"
}

arradio-msg-error() {
  local msgprefix='\033[1;31m**'
  local msgsuffix='\033[0m'
  [ ${ARRADIO_NOCOLOR} -eq 1 ] && msgprefix='[error]'
  echo -e "${msgprefix}${msgsuffix} $@" 2>&1
  exit 1
}

arradio-print-version() {
  echo "arradio v${ARRADIO_VERSION}"
  exit 0
}

arradio-print-help() {
  cat << __HELP__
Usage:
  arradio [command]

Available Commands:
  top500             Get arradio-top500 radio stations
  random             Get random list of radio stations
  search  string     Search for radio stations by keyword
  listen  id         Listen specified StationSHOUTCAST_API_ID
  fadd    id         Add radio station to your favourites
  fdel    id         Delete radio station from your favourites
  flist              List favourites radio stations
  help               Show this help information
  version            Show version information
  self-install       Install arradio itself
  self-update        Update arradio itself

Flags::
  -l number          Limit the number of stations to search and display
  -w                 Wide output format
__HELP__
  exit 0
}

arradio-check-deps() {
  for dep in $@; do
    # Search for the given executable in PATH (avoids a dependency on the `which` command)
    if ! type -P $dep >/dev/null 2>&1; then
      arradio-msg-error "Dependency '$dep' not found."
    fi
  done
}

arradio-filter-output-fzf() {
  arradio-check-deps "cat" "xmllint" "fzf"
  cat - \
  | xmllint --xpath "//stationlist/station[@id]" - \
  | fzf
}

arradio-filter-output() {
  arradio-check-deps "cat" "xmllint" "grep" "sed"
  cat - \
  | xmllint --format - \
  | grep 'station name' \
  | sed -e 's|.* name="|StationName:\\t|' \
        -e 's| mt="|\\nMediaType:\\t|' \
        -e 's| id="|\\nStationID:\\t|' \
        -e 's| br="|\\nBitrate:\\t|' \
        -e 's| genre="|\\nGenre:\\t\\t|' \
        -e 's| ct="|\\nPlaying:\\t|' \
        -e 's| lc=".*$|\\n|' \
  | sed -e 's/"//g' \
  | sed -e 's|\&amp;|\&|g' \
  | sed -e 's/\\n/\'$'\n/g' -e 's/\\t/\'$'\t/g' -e 's|\$||g' \
  | \
  (
    if [[ $ARRADIO_OUTPUT_WIDE -eq 0 ]]; then
      grep -ve 'MediaType:' -ve 'Bitrate' -ve 'Genre:'
    else
      cat -
    fi
  )
}

arradio-get-opts() {
  while [[ $1 ]]; do
    case $1 in
      --limit|-l) ARRADIO_OUTPUT_LIMIT=$2 && shift ;;
      --wide|-w) ARRADIO_OUTPUT_WIDE=1 ;;
    esac
    shift
  done
}

# =============================================================================
# SELF
# =============================================================================

arradio-self-install() {
  arradio-check-deps "mkdir" "curl" "chmod"
  if [ -d ${ARRADIO_BINDIR} ]; then
    arradio-msg-error "arradio previously installed. Please remove it or run 'self update' command."
  fi
  arradio-msg-debug "Installing arradio to ${ARRADIO_HOME}"
  mkdir -p ${ARRADIO_HOME} ${ARRADIO_BINDIR} ${ARRADIO_FAVDIR}
  curl -fsSL ${ARRADIO_GITHUB_RAW} -o ${ARRADIO_BINDIR}/arradio && chmod +x ${ARRADIO_BINDIR}/arradio
  arradio-msg-info "Installed successfully!"
  arradio-msg-info "IMPORTANT: To finish do you need to add binaries to your PATH as for example:"
  arradio-msg-info "  export PATH=\$HOME/.arradio/bin:\$PATH"
}

arradio-self-update() {
  arradio-check-deps "curl"
  if [ ! -d ${ARRADIO_BINDIR} ]; then
    arradio-msg-error "Cannot update arradio. You need to install it first."
  fi
  arradio-msg-debug "Updating ${ARRADIO_SRCDIR}"
  curl -fsSL ${ARRADIO_GITHUB_RAW} -o ${ARRADIO_BINDIR}/arradio && chmod +x ${ARRADIO_BINDIR}/arradio
  arradio-msg-info "Updated successfully!"
}

# =============================================================================
# SHOUTcast (see: http://wiki.winamp.com/wiki/SHOUTcast_Radio_Directory_API)
# =============================================================================

arradio-top500() {
  arradio-check-deps "curl"
  curl -s "${SHOUTCAST_API_URL}Top500?k=${SHOUTCAST_API_ID}&limit=${ARRADIO_OUTPUT_LIMIT}" | arradio-filter-output
}

arradio-search() {
  arradio-check-deps "curl"
  [ $# -lt 1 ] && arradio-print-help
  local string="$1"
  curl -s "${SHOUTCAST_API_URL}stationsearch?k=${SHOUTCAST_API_ID}&search=${string}&limit=${ARRADIO_OUTPUT_LIMIT}" | arradio-filter-output
}

arradio-random() {
  arradio-check-deps "curl"
  curl -s "${SHOUTCAST_API_URL2}randomstations?k=${SHOUTCAST_API_ID}&f=xml&limit=${ARRADIO_OUTPUT_LIMIT}" | arradio-filter-output
}

# =============================================================================
# LISTEN
# =============================================================================

arradio-listen() {
  arradio-check-deps "curl" "grep" "cut"
  [ $# -lt 1 ] && arradio-print-help
  local id="$1"
  curl -o $ARRADIO_TMPFILE -s "http://yp.shoutcast.com/sbin/tunein-station.pls?id=${id}"
  if ! grep -q 'numberofentries=0' $ARRADIO_TMPFILE; then
    $PLAYER $(grep 'File1' $ARRADIO_TMPFILE | cut -d'=' -f2)
  fi
}

# =============================================================================
# FAVOURITES
# =============================================================================

arradio-fadd() {
  arradio-check-deps "curl" "grep"
  [ $# -lt 1 ] && arradio-print-help
  local id="$1"
  [ ! -d $ARRADIO_FAVDIR ] && mkdir -p $ARRADIO_FAVDIR
  curl -o $ARRADIO_TMPFILE -s "http://yp.shoutcast.com/sbin/tunein-station.pls?id=${id}"
  if ! grep -q 'numberofentries=0' $ARRADIO_TMPFILE; then
    cp -f $ARRADIO_TMPFILE $ARRADIO_FAVDIR/$id
  fi
}

arradio-fdel() {
  [ $# -lt 1 ] && arradio-print-help
  local id="$1" 
  rm
   -f $ARRADIO_FAVDIR/$id
}
arradio-flist() {
  arradio-check-deps "grep" "cut" "sed"
  if [ -d $ARRADIO_FAVDIR ]; then
    for FAV in $ARRADIO_FAVDIR/*; do
      printf "%8d " "$(basename $FAV)"
      grep 'Title1=' $FAV | cut -d')' -f2 | sed 's/^ //'
    done
  fi
}

export LC_ALL=C

readonly ARRADIO_VERSION="0.0.1"
readonly ARRADIO_GITHUB_RAW="https://raw.githubusercontent.com/sepen/arradio/master/arradio"

# Global variables
export ARRADIO_NOCOLOR=${ARRADIO_NOCOLOR:-0}
export ARRADIO_DEBUG=${ARRADIO_DEBUG:-0}
export ARRADIO_HOME="${ARRADIO_HOME:-${HOME}/.arradio}"
export ARRADIO_BINDIR="${ARRADIO_BINDIR:-${ARRADIO_HOME}/bin}"
export ARRADIO_FAVDIR="${ARRADIO_FAVDIR:-${ARRADIO_HOME}/favorites}"
export ARRADIO_TMPDIR="${ARRADIO_TMPDIR:-${ARRADIO_HOME}/tmp}"

readonly PLAYER="mpv --no-video"
#readonly PLAYER="mplayer -nocache"
#readonly PLAYER="vlc"

readonly ARRADIO_TMPFILE="${ARRADIO_TMPDIR}/cache"

readonly SHOUTCAST_API_ID="sh17tOUi_ezL61_A"
readonly SHOUTCAST_API_URL="http://api.shoutcast.com/legacy/"
readonly SHOUTCAST_API_URL2="http://api.shoutcast.com/station/"

: ${ARRADIO_OUTPUT_LIMIT:=500} # required for arradio-top500
: ${ARRADIO_OUTPUT_WIDE:=0} # required for wide output format

# We need at least one media player application
: ${found:=0}
for player in mpv mplayer vlc; do
  arradio-check-deps $player >/dev/null 2>&1
  [[ $? -eq 0 ]] && found=1 && break
done
[[ $found -eq 0 ]] && arradio-print-error "Media player application not found. VLC, Mplayer or mpv is required"

# Show help when no arguments given
[ $# -eq 0 ] && arradio-print-help

arradio-get-opts $@

while [ $1 ]; do
  case $1 in
    arradio-top500) arradio-top500 ; break ;;
    search) shift 1 ; arradio-search $@ ; break ;;
    random) arradio-random ; break ;;
    listen) shift 1 ; arradio-listen $1 ; break ;;
    fadd) shift 1 ; arradio-fadd $1 ; break ;;
    fdel) shift 1 ; arradio-fdel $1; break ;;
    flist) arradio-flist ; break ;;
    version) arradio-print-version ;;
    self-install) arradio-self-install ;;
    self-update) arradio-self-update ;;
    *) arradio-print-help ;;
  esac
  shift
done

# End of file
