#!/usr/bin/env bash

# =============================================================================
# CONFIG / CONSTANTS
# =============================================================================
readonly ARRADIO_VERSION="0.5.1"
readonly ARRADIO_GITHUB_RAW="https://raw.githubusercontent.com/sepen/arradio/master"

# APIs and URLs
readonly SHOUTCAST_API_ID="sh17tOUi_ezL61_A"
readonly SHOUTCAST_API_URL="http://api.shoutcast.com/legacy/"
readonly SOMAFM_API_URL="https://somafm.com/channels.xml"

# Locale / PATH
export LC_ALL=${LC_ALL:-C}
export PATH="${ARRADIO_BIN_DIR}:${PATH}"

# =============================================================================
# HELPERS
# =============================================================================
arradio-check-deps() {
  for dep in "$@"; do
    if ! type -P "$dep" >/dev/null 2>&1; then
      arradio-msg-error "Dependency '$dep' not found."
    fi
  done
}

arradio-msg-debug() {
  local msgprefix msg
  if [ "${ARRADIO_DEBUG:-0}" -eq 1 ]; then
    if [ "${ARRADIO_NOCOLOR:-0}" -eq 1 ]; then
      msgprefix='[debug]'
    else
      msgprefix='\033[1;33m**\033[0m'
    fi
    msg="$*"
    printf "%b %s\n" "$msgprefix" "$msg"
  fi
}

arradio-msg-info() {
  local msgprefix msg
  if [ "${ARRADIO_NOCOLOR:-0}" -eq 1 ]; then
    msgprefix='**'
  else
    msgprefix='\033[0;32m**\033[0m'
  fi
  msg="$*"
  printf "%b %s\n" "$msgprefix" "$msg"
}

arradio-msg-error() {
  local msgprefix msg
  if [ "${ARRADIO_NOCOLOR:-0}" -eq 1 ]; then
    msgprefix='[error]'
  else
    msgprefix='\033[1;31m**\033[0m'
  fi
  msg="$*"
  printf "%b %s\n" "$msgprefix" "$msg" >&2
  exit 1
}

arradio-print-version() {
  printf "arradio v%s\n" "${ARRADIO_VERSION}"
  exit 0
}

arradio-print-env() {
  arradio-check-deps env grep sed
  local msgprefix='\033[1m'; local msgsuffix='\033[0m'
  [ "${ARRADIO_NOCOLOR:-0}" -eq 1 ] && msgprefix='**'
  printf "%b%-40s  %s%b\n" "$msgprefix" "VARIABLE" "VALUE" "$msgsuffix"
  env | grep '^ARRADIO' | sed 's|=| |' | while read variable value; do
    printf "%-40s  %s\n" "${variable}" "${value}"
  done
  exit 0
}

arradio-print-help() {
  cat << __HELP__
Usage:
  arradio [command] <flags>

Commands:
  install                  Install arradio itself
  upgrade                  Upgrade arradio itself
  list                     List top streams (enabled services only)
  search [string]          Search across enabled services
  play [stream-id]         Play to specified stream
  info [stream-id]         Show info for a stream
  fadd [stream-id]         Add to favorites
  fdel [stream-id]         Remove from favorites
  flist                    List favorites
  ui                       Start UI (fzf required)
  tlist                    List installed UI themes
  env                      Show environment variables
  keys                     Show keybindings
  version                  Show version
  help                     Show this help

Flags:
  -s, --services [csv]     Limit services (shoutcast,somafm,iptv)
  -l, --limit [num]        Output limit (default: ${ARRADIO_OUTPUT_LIMIT})
  -o, --output [fmt]       Format simple|wide (default: ${ARRADIO_OUTPUT_FILTER})
  -p, --player [cmd]       Player command (default: ${ARRADIO_PLAYER_CMD})
  -t, --theme  [name]      UI theme (default: ${ARRADIO_UI_THEME})
  -b, --no-color           Disable colors
  -n, --no-cache           Disable cache
  -d, --debug              Debug messages
__HELP__
  exit 0
}

arradio-parse-flags() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -s|--services)
        ARRADIO_SERVICES_FILTER="$2"
        shift 2
        continue
        ;;
      -l|--limit)
        ARRADIO_OUTPUT_LIMIT="$2"
        shift 2
        continue
        ;;
      -o|--output)
        ARRADIO_OUTPUT_FILTER="$2"
        shift 2
        continue
        ;;
      -p|--player)
        ARRADIO_PLAYER_CMD="$2"
        shift 2
        continue
        ;;
      -t|--theme)
        ARRADIO_UI_THEME="$2"
        shift 2
        continue
        ;;
      -b|--no-color)
        ARRADIO_NOCOLOR=1
        shift
        continue
        ;;
      -n|--no-cache)
        ARRADIO_NOCACHE=1
        shift
        continue
        ;;
      -d|--debug)
        ARRADIO_DEBUG=1
        shift
        continue
        ;;
      *)
        # unknown option, skip it
        shift
        continue
        ;;
    esac
  done
}

arradio-load-config() {
  local cfg="${ARRADIO_CONFIG_FILE:-${HOME}/.arradio/config}"
  [ -f "$cfg" ] || return 0

  local lineno=0
  local errors=0
  while IFS=: read -r key value; do
    lineno=$((lineno + 1))

    # Remove leading/trailing whitespace
    key="${key#"${key%%[![:space:]]*}"}"
    key="${key%"${key##*[![:space:]]}"}"
    value="${value#"${value%%[![:space:]]*}"}"
    value="${value%"${value##*[![:space:]]}"}"

    # Skip empty lines and comments
    [ -z "$key" ] && continue
    case "$key" in
      \#*) continue
        ;;
    esac

    # Validate key format (letters, digits, underscore, dash)
    if ! [[ "$key" =~ ^[A-Za-z0-9_-]+$ ]]; then
      printf "Config error in %s at line %d: invalid key '%s'\n" "$cfg" "$lineno" "$key" >&2
      errors=$((errors + 1))
      continue
    fi

    # Validate value is non-empty
    if [ -z "$value" ]; then
      printf "Config error in %s at line %d: empty value for key '%s'\n" "$cfg" "$lineno" "$key" >&2
      errors=$((errors + 1))
      continue
    fi

    # Convert key to env var format
    local var="ARRADIO_${key//-/_}"
    var="$(printf "%s" "$var" | tr '[:lower:]' '[:upper:]')"
    export "$var"="$value"
  done < "$cfg"

  return $errors
}

arradio-get-md5-command() {
  if type -P md5sum >/dev/null 2>&1; then
    echo "md5sum"
  elif type -P md5 >/dev/null 2>&1 || type -P md5 >/dev/null 2>&1; then
    echo "md5"
  else
    arradio-msg-error "md5sum or md5 command is required"
  fi
}

arradio-set-player() {
    env|grep ARRADIO_PLAYER_CMD >/tmp/arradio-env.txt
  local pcmd="${ARRADIO_PLAYER_CMD}"
  # If not set or command not found, try to auto-detect
  if ! type -P $pcmd >/dev/null 2>&1; then
    # Auto-detect player
    if type -P mpv >/dev/null 2>&1; then
      pcmd="mpv --no-video > /dev/null 2>&1"
    elif [ -f /Applications/mpv.app/Contents/MacOS/mpv ]; then
      pcmd="/Applications/mpv.app/Contents/MacOS/mpv --no-video"
    elif type -P ffplay >/dev/null 2>&1; then
      pcmd="ffplay -vn -nodisp"
    elif type -P mplayer >/dev/null 2>&1; then
      pcmd="mplayer -vo null"
    elif type -P cvlc >/dev/null 2>&1; then
      pcmd="cvlc --novideo"
    elif type -P vlc >/dev/null 2>&1; then
      pcmd="vlc --novideo"
    elif [ -f /Applications/VLC.app/Contents/MacOS/VLC ]; then
      pcmd="/Applications/VLC.app/Contents/MacOS/VLC --novideo"
    fi
  fi
  export ARRADIO_PLAYER_CMD="${pcmd}"
}

arradio-get-fzf-version() {
  if ! type -P fzf >/dev/null 2>&1; then
    return 1
  fi
  fzf --version | cut -d' ' -f1
  return 0
}

arradio-get-stream-url() {
  arradio-check-deps grep sed curl
  [ -z "${ARRADIO_FAV_DIR:-}" ] && arradio-msg-error "ARRADIO_FAV_DIR is not set"
  [ -z "${ARRADIO_DB_DIR:-}" ]  && arradio-msg-error "ARRADIO_DB_DIR is not set"
  [ -z "${ARRADIO_TMP_DIR:-}" ] && arradio-msg-error "ARRADIO_TMP_DIR is not set"
  [ $# -lt 1 ] && arradio-print-help
  local stream_id="$1" stream_url=
  local fav_file="${ARRADIO_FAV_DIR}/${stream_id}"
  local db_file="${ARRADIO_DB_DIR}/${stream_id}"
  if [ -f "${fav_file}" ]; then
    stream_url="$(grep '^url: ' "${fav_file}" 2>/dev/null | sed 's|url: ||')"
  elif [ -f "${db_file}" ]; then
    stream_url="$(grep '^url: ' "${db_file}" 2>/dev/null | sed 's|url: ||')"
  fi
  if [ -z "${stream_url}" ]; then
    stream_url="$(curl -X POST -d "station=${stream_id}" -s 'https://directory.shoutcast.com/Player/GetStreamUrl' | sed -e 's/^"//' -e 's/"$//')"
    if [ -f "${db_file}" ]; then
      grep -v '^url: ' "${db_file}" > "${ARRADIO_TMP_FILE}"
      echo "url: ${stream_url}" >> "${ARRADIO_TMP_FILE}"
      cp "${ARRADIO_TMP_FILE}" "${db_file}"
    fi
  fi
  printf "%s\n" "${stream_url}"
}

arradio-check-favorites() {
  arradio-check-deps find
  if [ ! -d "${ARRADIO_FAV_DIR}" ]; then
    arradio-msg-error "Favorites directory not found. ${ARRADIO_FAV_DIR}"
  fi
  case "$(find "${ARRADIO_FAV_DIR}" -type d -empty 2>/dev/null)" in
    "${ARRADIO_FAV_DIR}") arradio-msg-error "No favorites found. Please add some first.";;
  esac
}

# =============================================================================
# INSTALL / UPGRADE
# =============================================================================
arradio-install() {
  arradio-check-deps mkdir curl chmod
  if [ -f "${ARRADIO_BIN_DIR}/arradio" ]; then
    arradio-msg-error "arradio previously installed. Remove it or run 'upgrade'."
  fi
  arradio-msg-debug "Installing arradio to ${ARRADIO_BIN_DIR}"
  mkdir -p "${ARRADIO_BIN_DIR}"
  curl -fsSL "${ARRADIO_GITHUB_RAW}/arradio" -o "${ARRADIO_BIN_DIR}/arradio"
  chmod +x "${ARRADIO_BIN_DIR}/arradio"
  arradio-msg-debug "Installing default UI theme"
  mkdir -p "${ARRADIO_UI_THEME_DIR}"
  curl -fsSL "${ARRADIO_GITHUB_RAW}/ui-themes/basic" -o "${ARRADIO_UI_THEME_DIR}/basic"
  arradio-msg-debug "Creating data dirs"
  mkdir -p "${ARRADIO_DB_DIR}" "${ARRADIO_CACHE_DIR}" "${ARRADIO_FAV_DIR}" "${ARRADIO_TMP_DIR}"
  arradio-msg-info "Installed successfully! $("${ARRADIO_BIN_DIR}/arradio" version)"
  arradio-msg-info "Add to PATH, e.g.: export PATH=\$HOME/.arradio/bin:\$PATH"
  exit 0
}

arradio-upgrade() {
  arradio-check-deps curl chmod
  if [ ! -f "${ARRADIO_BIN_DIR}/arradio" ]; then
    arradio-msg-error "Cannot upgrade. Install first."
  fi
  arradio-msg-debug "Upgrading $("${ARRADIO_BIN_DIR}/arradio" version)"
  curl -fsSL "${ARRADIO_GITHUB_RAW}/arradio" -o "${ARRADIO_BIN_DIR}/arradio"
  chmod +x "${ARRADIO_BIN_DIR}/arradio"
  arradio-msg-debug "Upgrading default UI theme"
  curl -fsSL "${ARRADIO_GITHUB_RAW}/ui-themes/basic" -o "${ARRADIO_UI_THEME_DIR}/basic"
  arradio-msg-info "Upgraded successfully! $("${ARRADIO_BIN_DIR}/arradio" version)"
  exit 0
}

# =============================================================================
# SHOUTcast
# =============================================================================
arradio-shoutcast-api-request() {
  arradio-check-deps cut curl xmllint
  local md5cmd; md5cmd="$(arradio-get-md5-command)"
  [ $# -lt 1 ] && arradio-print-help
  local request_url="$1"
  local cache_name; cache_name="$(printf "%s" "${request_url}" | ${md5cmd} | cut -d' ' -f1)"
  local cache_file="${ARRADIO_CACHE_DIR}/${cache_name}"
  if [ "${ARRADIO_NOCACHE:-0}" -eq 1 ] || [ ! -f "${cache_file}" ]; then
    arradio-msg-debug "Caching SHOUTcast: ${request_url}"
    curl -s "${request_url}" -o "${ARRADIO_TMP_FILE}"
    xmllint --format "${ARRADIO_TMP_FILE}" --output "${cache_file}"
  fi
  cat "${cache_file}"
}

arradio-shoutcast-output-filter() {
  arradio-check-deps grep sed head
  local msgprefix='\033[1m'; local msgsuffix='\033[0m'
  [ "${ARRADIO_NOCOLOR:-0}" -eq 1 ] && msgprefix=''
  case "${ARRADIO_OUTPUT_FILTER}" in
    simple) printf "%b%-18s  %-40s  %-28s%b\n" "$msgprefix" "STATION" "NAME" "GENRE" "$msgsuffix";;
    wide)   printf "%b%-18s  %-40s  %-28s  %s%b\n" "$msgprefix" "STATION" "NAME" "GENRE" "INFO" "$msgsuffix";;
  esac
  grep 'station name' | while IFS= read -r xml_line; do
    stream_id="${xml_line#*id=\"}"; stream_id="${stream_id%%\" *}"
    db_file="${ARRADIO_DB_DIR}/${stream_id}"
    if [ "${ARRADIO_NOCACHE:-0}" -eq 1 ] || [ ! -f "${db_file}" ]; then
      arradio-msg-debug "Updating db for station ${stream_id}"
      printf "%s\n" "$xml_line" | sed \
        -e 's|.*<station name="|name: |' \
        -e 's|" mt="|\nmt: |' \
        -e 's|" id="|\nid: |' \
        -e 's|" br="|\nbr: |' \
        -e 's|" genre="|\ngenre: |' \
        -e 's|" genre2="|\ngenre2: |' \
        -e 's|" genre3="|\ngenre3: |' \
        -e 's|" genre4="|\ngenre4: |' \
        -e 's|" logo="|\nlogo: |' \
        -e 's|" ct="|\ninfo: |' \
        -e 's|" lc="|\nlc: |' \
        -e 's|"/>|\n|' \
        -e 's|\&quot;|"|g' \
        -e 's|\&nbsp;| |g' \
        -e 's|\&lt;|<|g' \
        -e 's|\&gt;|>|g' \
        -e 's|\&amp;|\&|g' > "${db_file}"
    fi
    station_name="$(grep '^name: ' "${db_file}" 2>/dev/null | sed 's|name: ||' | head -c 40)"
    station_genre="$(grep '^genre: ' "${db_file}" 2>/dev/null | sed 's|genre: ||')"
    station_info="$(grep '^info: ' "${db_file}" 2>/dev/null | sed 's|info: ||')"
    case "${ARRADIO_OUTPUT_FILTER}" in
      simple) printf "%-18s  %-40s  %-28s\n" "${stream_id}" "${station_name:-none}" "${station_genre:-none}";;
      wide)   printf "%-18s  %-40s  %-28s  %s\n" "${stream_id}" "${station_name:-none}" "${station_genre:-none}" "${station_info:-none}";;
    esac
  done
}

arradio-shoutcast-list() {
  arradio-shoutcast-api-request "${SHOUTCAST_API_URL}Top500?k=${SHOUTCAST_API_ID}&limit=${ARRADIO_OUTPUT_LIMIT}" | arradio-shoutcast-output-filter
}

arradio-shoutcast-search() {
  [ $# -lt 1 ] && arradio-print-help
  arradio-shoutcast-api-request "${SHOUTCAST_API_URL}stationsearch?search=$1&k=${SHOUTCAST_API_ID}&limit=${ARRADIO_OUTPUT_LIMIT}" | arradio-shoutcast-output-filter
}

# =============================================================================
# SomaFM
# =============================================================================
arradio-somafm-api-request() {
  arradio-check-deps cut curl xmllint grep sed tr
  local md5cmd; md5cmd="$(arradio-get-md5-command)"
  [ $# -lt 1 ] && arradio-print-help
  local request_url="$1"
  local cache_name; cache_name="$(printf "%s" "${request_url}" | ${md5cmd} | cut -d' ' -f1)"
  local cache_file="${ARRADIO_CACHE_DIR}/${cache_name}"
  if [ "${ARRADIO_NOCACHE:-0}" -eq 1 ] || [ ! -f "${cache_file}" ]; then
    arradio-msg-debug "Caching SomaFM: ${request_url}"
    curl -s "${request_url}" -o "${ARRADIO_TMP_FILE}"
    xmllint --dropdtd --format --nocdata "${ARRADIO_TMP_FILE}" \
      | grep -ve '<?xml ' -ve '<channels' \
      | sed -e 's/^[ \t]*//' \
      | tr '\n' ' ' \
      | sed -e 's|</channel>|</channel>\n|g' > "${cache_file}"
  fi
  cat "${cache_file}"
}

arradio-somafm-output-filter() {
  arradio-check-deps grep sed head cat
  local msgprefix='\033[1m'; local msgsuffix='\033[0m'
  [ "${ARRADIO_NOCOLOR:-0}" -eq 1 ] && msgprefix=''
  case "${ARRADIO_OUTPUT_FILTER}" in
    simple) printf "%b%-18s  %-40s  %-28s%b\n" "$msgprefix" "STATION" "NAME" "GENRE" "$msgsuffix";;
    wide)   printf "%b%-18s  %-40s  %-28s  %s%b\n" "$msgprefix" "STATION" "NAME" "GENRE" "INFO" "$msgsuffix";;
  esac
  cat - | grep -a 'channel id=' | sed "${ARRADIO_OUTPUT_LIMIT}q" | while read xml_line; do
    stream_id="$(printf "%s" "${xml_line}" | sed -e 's|.* id="||' -e 's|".*||')"
    db_file="${ARRADIO_DB_DIR}/${stream_id}"
    if [ "${ARRADIO_NOCACHE:-0}" -eq 1 ] || [ ! -f "${db_file}" ]; then
      printf "%s\n" "${xml_line}" | sed \
        -e "s|.*<title>|id: ${stream_id}\nname: |" \
        -e 's|</title> <description>|\ninfo: |' \
        -e 's|</description>.*<genre>|\ngenre: |' \
        -e 's|</genre>.*<fastpls format="mp3">|\nurl: |' \
        -e 's|</fastpls>.*|\n|' \
        -e 's|\&quot;|"|g' -e 's|\&nbsp;| |g' -e 's|\&lt;|<|g' -e 's|\&gt;|>|g' -e 's|\&amp;|\&|g' > "${db_file}"
    fi
    station_genre="$(grep '^genre: ' "${db_file}" 2>/dev/null | sed 's|genre: ||')"
    station_name="$(grep '^name: ' "${db_file}" 2>/dev/null | sed 's|name: ||' | head -c 40)"
    station_info="$(grep '^info: ' "${db_file}" 2>/dev/null | sed 's|info: ||')"
    case "${ARRADIO_OUTPUT_FILTER}" in
      simple) printf "%-18s  %-40s  %-28s\n" "${stream_id}" "${station_name:-none}" "${station_genre:-none}";;
      wide)   printf "%-18s  %-40s  %-28s  %s\n" "${stream_id}" "${station_name:-none}" "${station_genre:-none}" "${station_info:-none}";;
    esac
  done
}

arradio-somafm-list() {
  arradio-somafm-api-request "${SOMAFM_API_URL}" | arradio-somafm-output-filter
}

arradio-somafm-search() {
  arradio-check-deps sed grep
  [ $# -lt 1 ] && arradio-print-help
  arradio-somafm-list | sed '1d' | grep -i "$1"
}

# =============================================================================
# IPTV
# =============================================================================
arradio-iptv-api-request() {
  arradio-check-deps curl cut grep sed tr
  local md5cmd; md5cmd="$(arradio-get-md5-command)"
  [ $# -lt 1 ] && arradio-print-help
  local request_url="$1"
  local cache_name; cache_name="$(printf "%s" "${request_url}" | ${md5cmd} | cut -d' ' -f1)"
  local cache_file="${ARRADIO_CACHE_DIR}/${cache_name}"
  if [ "${ARRADIO_NOCACHE:-0}" -eq 1 ] || [ ! -f "${cache_file}" ]; then
    arradio-msg-debug "Caching IPTV: ${request_url}"
    curl -s "${request_url}" -o "${ARRADIO_TMP_FILE}"
    grep -e '^#EXTINF:' -e '^http' "${ARRADIO_TMP_FILE}" \
      | sed 's|^http|url=http|' \
      | tr '\n' ' ' \
      | sed 's|#EXTINF:|\n|g' | sed '1d' > "${cache_file}"
  fi
  cat "${cache_file}"
}

arradio-iptv-output-filter() {
  arradio-check-deps sed cut tr head
  local msgprefix='\033[1m'; local msgsuffix='\033[0m'
  [ "${ARRADIO_NOCOLOR:-0}" -eq 1 ] && msgprefix=''

  case "${ARRADIO_OUTPUT_FILTER}" in
    simple) printf "%b%-38s  %s%b\n" "$msgprefix" "STATION" "NAME" "$msgsuffix" ;;
    wide)   printf "%b%-38s  %-42s  %s%b\n" "$msgprefix" "STATION" "NAME" "INFO" "$msgsuffix" ;;
  esac

  # MD5 command for fallback when sanitized name is empty
  local md5cmd; md5cmd="$(arradio-get-md5-command)"

  # Read from stdin
  while IFS= read -r station_line; do
    # Extract fields
    local stream_url station_name station_info
    stream_url="$(printf "%s" "${station_line}" | sed 's|.* url=||')"
    station_name="$(printf "%s" "${station_line}" | cut -d',' -f2 | sed 's| url=.*||')"
    station_info="${station_name}"
    [ -z "${station_name}" ] && continue

    # --------- Filename-safe stream_id (alphanumeric only) ----------
    # 1) Optional transliteration to ASCII (if iconv exists)
    local ascii_name; ascii_name="${station_name}"
    # 2) Lowercase, then keep only [A-Za-z0-9]
    local stream_id
    stream_id="$(printf "%s" "${ascii_name}" | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]')"
    # 3) Fallback: if empty after sanitizing, use MD5 of original name
    if [ -z "${stream_id}" ]; then
      stream_id="$(printf "%s" "${station_name}" | ${md5cmd} | cut -d' ' -f1)"
    fi
    # -----------------------------------------------------------------

    local db_file="${ARRADIO_DB_DIR}/${stream_id}"

    if [ "${ARRADIO_NOCACHE:-0}" -eq 1 ] || [ ! -f "${db_file}" ]; then
      {
        printf "id: %s\n"   "${stream_id}"
        printf "name: %s\n" "${station_name}"
        printf "info: %s\n" "${station_info}"
        printf "genre: %s\n" "iptv"
        printf "url: %s\n"  "${stream_url}"
      } > "${db_file}"
    fi

    case "${ARRADIO_OUTPUT_FILTER}" in
      simple) printf "%-38s  %s\n" "${stream_id}" "${station_name:-NO NAME}" ;;
      wide)   printf "%-38s  %-42s  %s\n" "${stream_id}" "$(printf "%s" "${station_name}" | head -c 42)" "${station_info}" ;;
    esac
  done
}


arradio-iptv-list() {
  arradio-iptv-api-request "${ARRADIO_IPTV_URL}" | arradio-iptv-output-filter | sed "${ARRADIO_OUTPUT_LIMIT}q"
}

arradio-iptv-search() {
  arradio-check-deps sed grep
  [ $# -lt 1 ] && arradio-print-help
  arradio-iptv-list | sed '1d' | grep -i "$1"
}

# =============================================================================
# SEARCH / LIST (respects enabled services)
# =============================================================================
arradio-search() {
  arradio-check-deps sed
  [ $# -lt 1 ] && arradio-print-help
  local q="$1"
  (
    [ "${ARRADIO_ENABLE_SHOUTCAST:-1}" -eq 1 ] && arradio-shoutcast-search "$q"
    [ "${ARRADIO_ENABLE_SOMAFM:-1}" -eq 1 ] && arradio-somafm-search "$q"
    [ "${ARRADIO_ENABLE_IPTV:-1}" -eq 1 ] && arradio-iptv-search "$q"
  ) | sed "${ARRADIO_OUTPUT_LIMIT}q"
}

arradio-list() {
  arradio-check-deps sed
  (
    [ "${ARRADIO_ENABLE_SHOUTCAST:-1}" -eq 1 ] && arradio-shoutcast-list
    [ "${ARRADIO_ENABLE_SOMAFM:-1}" -eq 1 ] && arradio-somafm-list
    [ "${ARRADIO_ENABLE_IPTV:-1}" -eq 1 ] && arradio-iptv-list
  ) | sed "${ARRADIO_OUTPUT_LIMIT}q"
}

# =============================================================================
# PLAY / INFO / FAVORITES
# =============================================================================
arradio-play() {
  local stream_id="$1"
  local stream_url; stream_url="$(arradio-get-stream-url "$stream_id")"
  [ -z "${stream_url}" ] && arradio-msg-error "stream_url not found for stream_id ${stream_id}"
  arradio-set-player
  arradio-msg-info "${ARRADIO_PLAYER_CMD} ${stream_url}"
  eval "${ARRADIO_PLAYER_CMD} \"${stream_url}\""
}

arradio-info() {
  arradio-check-deps grep sed
  [ $# -lt 1 ] && arradio-print-help
  local msgprefix='\033[1m'; local msgsuffix='\033[0m'
  [ "${ARRADIO_NOCOLOR:-0}" -eq 1 ] && msgprefix=''
  local stream_id="$1"
  local fav_file="${ARRADIO_FAV_DIR}/${stream_id}"
  local db_file="${ARRADIO_DB_DIR}/${stream_id}"
  [ -f "${db_file}" ] || db_file="${fav_file}"
  [ -f "${db_file}" ] || arradio-msg-error "stream_id ${stream_id} not found"
  local stream_url; stream_url="$(arradio-get-stream-url "$stream_id")"
  [ -z "${stream_url}" ] && arradio-msg-error "stream_url not found for ${stream_id}"
  local station_name;   station_name="$(grep '^name: ' "${db_file}" 2>/dev/null | sed 's|name: ||')"
  local station_genre;  station_genre="$(grep '^genre: ' "${db_file}" 2>/dev/null | sed 's|genre: ||')"
  local station_bitrate;station_bitrate="$(grep '^br: '   "${db_file}" 2>/dev/null | sed 's|br: ||')"
  local station_info;   station_info="$(grep '^info: ' "${db_file}" 2>/dev/null | sed 's|info: ||')"
  printf "%b%-8s%b  %s\n" "$msgprefix" "Station" "$msgsuffix" "${stream_id}"
  printf "%b%-8s%b  %s\n" "$msgprefix" "Name"    "$msgsuffix" "${station_name}"
  printf "%b%-8s%b  %s\n" "$msgprefix" "Genre"   "$msgsuffix" "${station_genre}"
  [ -n "${station_bitrate}" ] && printf "%b%-8s%b  %s kbit/s\n" "$msgprefix" "Bitrate" "$msgsuffix" "${station_bitrate}"
  [ -n "${station_info}" ]    && printf "%b%-8s%b  %s\n" "$msgprefix" "Info" "$msgsuffix" "${station_info}"
}

arradio-fadd() {
  arradio-check-deps cp
  [ $# -lt 1 ] && arradio-print-help
  local stream_id="$1"
  local db_file="${ARRADIO_DB_DIR}/${stream_id}"
  [ -f "${db_file}" ] && cp "${db_file}" "${ARRADIO_FAV_DIR}/${stream_id}"
}

arradio-fdel() {
  arradio-check-deps rm
  [ $# -lt 1 ] && arradio-print-help
  rm -f "${ARRADIO_FAV_DIR}/$1"
}

arradio-flist() {
  arradio-check-deps grep sed head
  arradio-check-favorites
  local msgprefix='\033[1m'; local msgsuffix='\033[0m'
  [ "${ARRADIO_NOCOLOR:-0}" -eq 1 ] && msgprefix=''
  case "${ARRADIO_OUTPUT_FILTER}" in
    simple) printf "%b%-18s  %-40s  %-28s%b\n" "$msgprefix" "STATION" "NAME" "GENRE" "$msgsuffix";;
    wide)   printf "%b%-18s  %-40s  %-28s  %s%b\n" "$msgprefix" "STATION" "NAME" "GENRE" "INFO" "$msgsuffix";;
  esac
  for fav_file in "${ARRADIO_FAV_DIR}"/*; do
    [ -f "${fav_file}" ] || continue
    stream_id="$(grep '^id:' "${fav_file}" 2>/dev/null | sed 's|id: ||')"
    station_genre="$(grep '^genre: ' "${fav_file}" 2>/dev/null | sed 's|genre: ||')"
    station_name="$(grep '^name: ' "${fav_file}" 2>/dev/null | sed 's|name: ||' | head -c 40)"
    station_info="$(grep '^info: ' "${fav_file}" 2>/dev/null | sed 's|info: ||')"
    case "${ARRADIO_OUTPUT_FILTER}" in
      simple) printf "%-18s  %-40s  %-28s\n" "${stream_id}" "${station_name:-none}" "${station_genre:-none}";;
      wide)   printf "%-18s  %-40s  %-28s  %s\n" "${stream_id}" "${station_name:-none}" "${station_genre:-none}" "${station_info:-none}";;
    esac
  done
}

# =============================================================================
# UI THEMES
# =============================================================================
arradio-ui-set-theme() {
  local ui_theme_color=''
  local ui_theme_vars=(fg preview_fg bg preview_bg hl fg_plus bg_plus gutter hl_plus info \
    border scrollbar preview_border preview_scrollbar separator label preview_label prompt \
    pointer marker spinner header)
  if [ -f "${ARRADIO_UI_THEME_DIR}/${ARRADIO_UI_THEME}" ]; then
    # shellcheck disable=SC1090
    . "${ARRADIO_UI_THEME_DIR}/${ARRADIO_UI_THEME}"
    # TODO: detect COLORTEPRM=truecolor and show a message if theme is not 24-bit
    if (( $(tput colors 2>/dev/null) < 256 )); then
      arradio-msg-error "Your terminal does not support 24-bit (truecolor). Try the 8-bit variant for ${ARRADIO_UI_THEME} or use a truecolor terminal."
    fi
    for ui_theme_var in "${ui_theme_vars[@]}"; do
      # valor mediante indirección
      val="${!ui_theme_var}"
      [ -z "${val}" ] && continue
      case "$(arradio-get-fzf-version || true)" in
        0.4*|0.5*|0.6*)
          ui_theme_color+="${val},"
          ;;
        *)
          case "${ui_theme_var}" in
            scrollbar|preview_border|preview_scrollbar|separator|label|preview_label|border) : ;;
            *) ui_theme_color+="${val}," ;;
          esac
          ;;
      esac
    done
    ui_theme_color="${ui_theme_color%,}"
    export FZF_DEFAULT_OPTS="${FZF_DEFAULT_OPTS:+$FZF_DEFAULT_OPTS }--color=${ui_theme_color}"
  else
    arradio-msg-info "UI theme not found; disabling colors for fzf"
    export FZF_DEFAULT_OPTS="${FZF_DEFAULT_OPTS:+$FZF_DEFAULT_OPTS }--no-color"
  fi
}

arradio-ui-list-themes() {
  arradio-check-deps find sort
  local themes; themes="$(find "${ARRADIO_UI_THEME_DIR}" -mindepth 1 -maxdepth 1 2>/dev/null)" || true
  if [ -z "${themes}" ]; then
    arradio-msg-info "No UI themes found. More info:"
    arradio-msg-info "  https://github.com/sepen/arradio#ui-themes"
  else
    local msgprefix='\033[1m'; local msgsuffix='\033[0m'
    [ "${ARRADIO_NOCOLOR:-0}" -eq 1 ] && msgprefix=''
    printf "%b%-14s  %8s  %s%b\n" "$msgprefix" "THEME" "PALETTE" "DESCRIPTION" "$msgsuffix"
    (
      for ui_theme in ${themes}; do
        unset ui_theme_name ui_theme_description ui_theme_palette
        # shellcheck disable=SC1090
        [ -f ${ui_theme} ] && . "${ui_theme}"
        if [ -n "${ui_theme_name:-}" ]; then
          printf "%-14s  %8s  %s\n" "${ui_theme_name}" "${ui_theme_palette}" "${ui_theme_description}"
        fi
      done
    ) | sort -n
  fi
}

# =============================================================================
# UI (dynamic binds per enabled services)
# =============================================================================
arradio-ui() {
  arradio-check-deps fzf
  arradio-ui-set-theme

  # Detect fzf version
  local fzf_ver
  fzf_ver="$(arradio-get-fzf-version)"

  # Build services list (favorites always first)
  local services=(favorites)
  [ "${ARRADIO_ENABLE_SHOUTCAST:-1}" -eq 1 ] && services+=(shoutcast)
  [ "${ARRADIO_ENABLE_SOMAFM:-1}"  -eq 1 ] && services+=(somafm)
  [ "${ARRADIO_ENABLE_IPTV:-1}"    -eq 1 ] && services+=(iptv)

  # Keys for ctrl bindings
  local keys=(f g h j)
  local key_index=0
  local header_parts=""

  # Build header text dynamically
  for svc in "${services[@]}"; do
    local lbl
    case "$svc" in
      favorites) lbl="Favorites" ;;
      shoutcast) lbl="SHOUTcast" ;;
      somafm)    lbl="SomaFM" ;;
      iptv)      lbl="IPTV" ;;
      *)         lbl="$svc" ;;
    esac
    if [ -z "$header_parts" ]; then
      header_parts="Ctrl-${keys[key_index]} ${lbl}"
    else
      header_parts="${header_parts} | Ctrl-${keys[key_index]} ${lbl}"
    fi
    key_index=$((key_index+1))
    [ "$key_index" -ge "${#keys[@]}" ] && break
  done
  local header_text=$'\n[ '"${header_parts}"$' ]\n[ ENTER to play | +/- add/del to Favorites ]\n\n'

  # Helper to map service to command
  service_cmd() {
    case "$1" in
      favorites) echo "arradio flist -l ${ARRADIO_OUTPUT_LIMIT} -o ${ARRADIO_OUTPUT_FILTER}" ;;
      shoutcast) echo "arradio list -s shoutcast -l ${ARRADIO_OUTPUT_LIMIT} -o ${ARRADIO_OUTPUT_FILTER}" ;;
      somafm)    echo "arradio list -s somafm -l ${ARRADIO_OUTPUT_LIMIT} -o ${ARRADIO_OUTPUT_FILTER}" ;;
      iptv)      echo "arradio list -s iptv -l ${ARRADIO_OUTPUT_LIMIT} -o ${ARRADIO_OUTPUT_FILTER}" ;;
      *)         echo "arradio list -l ${ARRADIO_OUTPUT_LIMIT} -o ${ARRADIO_OUTPUT_FILTER}" ;;
    esac
  }
  service_label() {
    case "$1" in
      favorites) echo "Favorites" ;;
      shoutcast) echo "SHOUTcast" ;;
      somafm)    echo "SomaFM" ;;
      iptv)      echo "IPTV" ;;
      *)         echo "$1" ;;
    esac
  }

  # Default service is favorites
  local default_service="${services[0]}"
  local default_cmd; default_cmd="$(service_cmd "${default_service}")"
  local default_lbl; default_lbl="$(service_label "${default_service}")"

  # Base fzf args
  local fzf_args=(
    --no-extended --exact
    --layout=reverse --info=inline --cycle
    --header "$header_text" --header-lines=1
  )

  # Adjust fzf args based on version
  if [[ "$fzf_ver" != 0.[0-3]* ]]; then
    # Use custom prompt for fzf >= 0.4.0 showing current service
    fzf_args+=( --prompt "${default_lbl}> ")
    # Use info in preview window for fzf >= 0.4.0
    fzf_args+=( --preview 'arradio info {1}')
    # Add --no-separator and --padding only for fzf >= 0.4.0
    fzf_args+=( --no-separator --padding=1)
    # Add --preview-window options only for fzf >= 0.4.0
    fzf_args+=( --preview-window 'down,15%,border,follow')
    # Add fzf border with label only for fzf >= 0.4.0
    fzf_args+=( --border=bold "--border-label= arradio v${ARRADIO_VERSION} ${ui_theme_name} theme " --border-label-pos=0)
    # Add advanced bindings for fzf >= 0.4.0
    fzf_args+=( --bind "enter:change-preview(arradio play {1} -p '${ARRADIO_PLAYER_CMD}')")
    fzf_args+=( --bind "focus:change-preview(arradio info {1})")
    fzf_args+=( --bind "+:reload(arradio fadd {1}; arradio flist -l ${ARRADIO_OUTPUT_LIMIT} -o ${ARRADIO_OUTPUT_FILTER})+change-prompt(Favorites> )+change-preview(arradio info {1})")
    fzf_args+=( --bind "-:reload(arradio fdel {1}; arradio flist -l ${ARRADIO_OUTPUT_LIMIT} -o ${ARRADIO_OUTPUT_FILTER})+change-prompt(Favorites> )+change-preview(arradio info {1})")
  else
    # Use custom prompt for fzf < 0.4.0
    fzf_args+=( --prompt "arradio> ")
    # Use arradio play in preview window for fzf < 0.4.0
    fzf_args+=( --preview 'arradio play {1}')
    # Use simpler preview window for fzf < 0.4.0
    fzf_args+=( --preview-window 'down:15%')
    # Add simple border for fzf < 0.4.0
    fzf_args+=( --border)
    # Add simpler bindings for fzf < 0.4.0
    fzf_args+=( --bind "enter:ignore")
    fzf_args+=( --bind "+:reload(arradio fadd {1}; arradio flist -l ${ARRADIO_OUTPUT_LIMIT} -o ${ARRADIO_OUTPUT_FILTER})")
    fzf_args+=( --bind "-:reload(arradio fdel {1}; arradio flist -l ${ARRADIO_OUTPUT_LIMIT} -o ${ARRADIO_OUTPUT_FILTER})")  
  fi

  # Add bindings for each enabled service
  key_index=0
  for svc in "${services[@]}"; do
    [ "$key_index" -ge "${#keys[@]}" ] && break
    local cmd; cmd="$(service_cmd "$svc")"
    local lbl; lbl="$(service_label "$svc")"
    # Adjust fzf args based on version
    if [[ "$fzf_ver" != 0.[0-3]* ]]; then
      fzf_args+=( --bind "ctrl-${keys[key_index]}:reload(${cmd})+change-prompt(${lbl}> )+change-preview(arradio info {1})")
    else
      fzf_args+=( --bind "ctrl-${keys[key_index]}:reload(${cmd})")
    fi
    key_index=$((key_index+1))
  done

  # Debug information if needed
  if [ "${ARRADIO_DEBUG:-0}" -eq 1 ]; then
    arradio-msg-debug "ui services: ${services[*]}"
    arradio-msg-debug "fzf version: ${fzf_ver}"
    arradio-msg-debug "fzf args: ${fzf_args[*]}"
  fi

  # Pipe default list into fzf
  eval "${default_cmd}" | fzf "${fzf_args[@]}"
}


# =============================================================================
# KEY BINDINGS
# =============================================================================

arradio-keybindings() {
  cat <<EOF
Keybindings:
  Enter         Select | Start
  Focus         Change selection.
  Ctrl-f        Reload favorites.
  Ctrl-t        Reload Shoutcast list.
  Ctrl-y        Reload SomaFM list.
  Ctrl-u        Reload IPTV list.
  +             Add selection to favorites.
  -             Remove selection to favorites.
EOF
}

# =============================================================================
# COMMAND ROUTER
# =============================================================================

# Set variables with defaults if not set
export ARRADIO_HOME="${ARRADIO_HOME:-${HOME}/.arradio}"
export ARRADIO_BIN_DIR="${ARRADIO_BIN_DIR:-${ARRADIO_HOME}/bin}"
export ARRADIO_DB_DIR="${ARRADIO_DB_DIR:-${ARRADIO_HOME}/db}"
export ARRADIO_CACHE_DIR="${ARRADIO_CACHE_DIR:-${ARRADIO_HOME}/cache}"
export ARRADIO_FAV_DIR="${ARRADIO_FAV_DIR:-${ARRADIO_HOME}/favorites}"
export ARRADIO_TMP_DIR="${ARRADIO_TMP_DIR:-${ARRADIO_HOME}/tmp}"
export ARRADIO_TMP_FILE="${ARRADIO_TMP_DIR}/stream"
export ARRADIO_CONFIG_FILE="${ARRADIO_CONFIG_FILE:-${ARRADIO_HOME}/config}"
export ARRADIO_UI_THEME_DIR="${ARRADIO_UI_THEME_DIR:-${ARRADIO_HOME}/ui-themes}"
export ARRADIO_UI_THEME="${ARRADIO_UI_THEME:-basic}"
export ARRADIO_PLAYER_CMD="${ARRADIO_PLAYER_CMD:-mpv --no-video --quiet --really-quiet}"
export ARRADIO_OUTPUT_FILTER="${ARRADIO_OUTPUT_FILTER:-simple}"
export ARRADIO_OUTPUT_LIMIT="${ARRADIO_OUTPUT_LIMIT:-20}"
export ARRADIO_NOCACHE="${ARRADIO_NOCACHE:-0}"
export ARRADIO_NOCOLOR="${ARRADIO_NOCOLOR:-0}"
export ARRADIO_ENABLE_SHOUTCAST="${ARRADIO_ENABLE_SHOUTCAST:-1}"
export ARRADIO_ENABLE_SOMAFM="${ARRADIO_ENABLE_SOMAFM:-1}"
export ARRADIO_ENABLE_IPTV="${ARRADIO_ENABLE_IPTV:-1}"

# Load user config (override defaults)
arradio-load-config

# Parse flags (override defaults + config)
arradio-parse-flags "$@"

# If user passed -s/--services (CSV), enable only those services (plus favorites)
if [ -n "${ARRADIO_SERVICES_FILTER:-}" ]; then
  ARRADIO_ENABLE_SHOUTCAST=0
  ARRADIO_ENABLE_SOMAFM=0
  ARRADIO_ENABLE_IPTV=0

  # split CSV into array (handles commas, optional spaces)
  IFS=',' read -r -a _svc_arr <<< "${ARRADIO_SERVICES_FILTER// /}"

  for svc in "${_svc_arr[@]}"; do
    case "$svc" in
      shoutcast) ARRADIO_ENABLE_SHOUTCAST=1 ;;
      somafm)    ARRADIO_ENABLE_SOMAFM=1 ;;
      iptv)      ARRADIO_ENABLE_IPTV=1 ;;
      favorites) ;; # favorites always implicitly available
      *) arradio-msg-debug "Unknown service in SERVICES_FILTER: '$svc'";;
    esac
  done
fi

[ $# -eq 0 ] && arradio-print-help

while [ "$1" ]; do
  case "$1" in
    install) arradio-install; break ;;
    upgrade) arradio-upgrade; break ;;
    list)
      [ "${ARRADIO_ENABLE_SHOUTCAST:-1}" -eq 1 ] && arradio-shoutcast-list
      [ "${ARRADIO_ENABLE_SOMAFM:-1}"  -eq 1 ] && arradio-somafm-list
      [ "${ARRADIO_ENABLE_IPTV:-1}"    -eq 1 ] && arradio-iptv-list
      break ;;
    search) shift; arradio-search "$@"; break ;;
    play)   shift; arradio-play "$1"; break ;;
    info)   shift; arradio-info "$1"; break ;;
    fadd)   shift; arradio-fadd "$1"; break ;;
    fdel)   shift; arradio-fdel "$1"; break ;;
    flist)  arradio-flist; break ;;
    ui)     arradio-ui; break ;;
    tlist)  arradio-ui-list-themes; break ;;
    env)    arradio-print-env; break ;;
    keys)   arradio-keybindings;break ;;
    version)arradio-print-version; break ;;
    list)   arradio-list; break ;;
    *) arradio-print-help; break ;;
  esac
  shift
done

# End of file
