#!/usr/bin/env bash
#
# arradio: shoutcast command line client
# Copyleft by Jose V Beneyto, <sepen@crux.nu>
#
# Dependencies:
# xmllint and curl binaries are required
# mpv or mplayer of vlc is required to play streaming urls

msgUsage() {
  echo "Usage: $(basename $0) <command> [options]"
  echo "Where commands are:"
  echo "  top500              Get top500 radio stations"
  echo "  random              Get random list of radio stations"
  echo "  search  <string>    Search for radio stations by keyword"
  echo "  listen  <id>        Listen specified StationID"
  echo "  fadd    <id>        Add radio station to your favourites"
  echo "  fdel    <id>        Delete radio station from your favourites"
  echo "  flist               List favourites radio stations"
  echo "  help                Show this help information"
  echo "  version             Show version information"
  echo "Options available:"
  echo "  -l <number>  Limit the number of stations to search and display"
  echo "  -w           Wide output format"
  exit 0
}

msgVersion() {
  echo "arradio 1.1 (Bash version) by Jose V Beneyto, <sepen@crux.nu>"
  exit 0
}

msgError() {
  echo "ERROR: $@" 2>&1
  exit 1
}

outfilter() {
  cat - \
  | xmllint --format - \
  | grep 'station name' \
  | sed -e 's|.* name="|StationName:\\t|' \
        -e 's| mt="|\\nMediaType:\\t|' \
        -e 's| id="|\\nStationID:\\t|' \
        -e 's| br="|\\nBitrate:\\t|' \
        -e 's| genre="|\\nGenre:\\t\\t|' \
        -e 's| ct="|\\nPlaying:\\t|' \
        -e 's| lc=".*$|\\n|' \
  | sed -e 's/"//g' \
  | sed -e 's|\&amp;|\&|g' \
  | sed -e 's/\\n/\'$'\n/g' -e 's/\\t/\'$'\t/g' -e 's|\$||g' \
  | \
  (
    if [[ $WIDE -eq 0 ]]; then
      grep -ve 'MediaType:' -ve 'Bitrate' -ve 'Genre:'
    else
      cat -
    fi
  )
}

checkDeps() {
  for dep in xmllint curl; do
    which $dep >/dev/null 2>&1
   [[ $? -ne 0 ]] && "$dep binary not found"
  done
  # Check for player application
  : ${found:=0}
  for player in mpv mplayer vlc; do
    which $player >/dev/null 2>&1
    [[ $? -eq 0 ]] && found=1
  done
  [[ $found -eq 0 ]] && msgError "player application not found. mpv or mplayer or vlc is required"
}

getopts() {
  while [[ $1 ]]; do
    case $1 in
      --limit|-l)
        LIMIT=$2
        shift
        ;;
      --wide|-w)
        WIDE=1
        ;;
    esac
    shift
  done
}

# shoutcast api (new/legacy)
# http://wiki.winamp.com/wiki/SHOUTcast_Radio_Directory_API
top500() {
  curl -s "${URL}Top500?k=${ID}&limit=${LIMIT}" | outfilter
}
search() {
  [ $# -lt 1 ] && msgUsage
  local string="$1"
  curl -s "${URL}stationsearch?k=${ID}&search=${string}&limit=${LIMIT}" | outfilter
}
random() {
  curl -s "${URL2}randomstations?k=${ID}&f=xml&limit=${LIMIT}" | outfilter
}
listen() {
  [ $# -lt 1 ] && msgUsage
  local id="$1"
  curl -o $TMPFILE -s "http://yp.shoutcast.com/sbin/tunein-station.pls?id=${id}"
  if ! grep -q 'numberofentries=0' $TMPFILE; then
    $PLAYER $(grep 'File1' $TMPFILE | cut -d'=' -f2)
  fi
}

# operations with favourites
fadd() {
  [ $# -lt 1 ] && msgUsage
  local id="$1"
  [ ! -d $FAVDIR ] && mkdir -p $FAVDIR
  curl -o $TMPFILE -s "http://yp.shoutcast.com/sbin/tunein-station.pls?id=${id}"
  if ! grep -q 'numberofentries=0' $TMPFILE; then
    cp -f $TMPFILE $FAVDIR/$id
  fi
}
fdel() {
  [ $# -lt 1 ] && msgUsage
  local id="$1" 
  rm -f $FAVDIR/$id
}
flist() {
  if [ -d $FAVDIR ]; then
    for FAV in $FAVDIR/*; do
      printf "%8d " "$(basename $FAV)"
      grep 'Title1=' $FAV | cut -d')' -f2 | sed 's/^ //'
    done
  fi
}

export LC_ALL=C

readonly PLAYER="mpv --no-video"
#readonly PLAYER="mplayer -nocache"
#readonly PLAYER="vlc"

readonly TMPFILE=$(mktemp /tmp/$(basename $0).XXX)
readonly FAVDIR="$HOME/.$(basename $0)/favorites"

# TODO:
# id for now from this source code (need to have own partner_id)
# http://members.home.nl/djheemstra/MeediOS/MeeMedia_plugins/SHOUTcast%20Radio/SHOUTcast.cs
readonly ID="sh17tOUi_ezL61_A"

readonly URL="http://api.shoutcast.com/legacy/"
readonly URL2="http://api.shoutcast.com/station/"

: ${LIMIT:=500} # required for top500
: ${WIDE:=0} # required for wide output format

checkDeps

[ $# -eq 0 ] && msgUsage

getopts $@

while [ $1 ]; do
  case $1 in
    top500)
      top500
      break
      ;;
    search)
      shift 1
      search $@
      break
      ;;
    random)
      random
      break
      ;;
    listen)
      shift 1
      listen $1
      break
      ;;
    fadd)
      shift 1
      fadd $1
      break
      ;;
    fdel)
      shift 1
      fdel $1
      break
      ;;
    flist)
      flist
      break
      ;;
    *)
      msgUsage
      ;;
  esac
  shift
done

rm -f $TMPFILE

# End of file
